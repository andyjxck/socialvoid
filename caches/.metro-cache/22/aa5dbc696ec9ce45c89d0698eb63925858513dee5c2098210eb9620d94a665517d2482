{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"../lib/errors","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":17,"index":775},"end":{"line":12,"column":41,"index":799}}],"key":"+GSAvg/CWfG2ifOQrWLkai/D9hY=","exportNames":["*"],"imports":1}},{"name":"../lib/fetch","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":13,"column":16,"index":817},"end":{"line":13,"column":39,"index":840}}],"key":"m5IduDkD0DmXIm44QxetlLAeo0E=","exportNames":["*"],"imports":1}},{"name":"../lib/helpers","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":14,"column":18,"index":860},"end":{"line":14,"column":43,"index":885}}],"key":"g7hF4pHwnWO84hRO36vjqsLwW80=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _classCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\").default;\n  var _createClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\").default;\n  var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P ? value : new P(function (resolve) {\n        resolve(value);\n      });\n    }\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var errors_1 = require(_dependencyMap[2], \"../lib/errors\");\n  var fetch_1 = require(_dependencyMap[3], \"../lib/fetch\");\n  var helpers_1 = require(_dependencyMap[4], \"../lib/helpers\");\n  var DEFAULT_SEARCH_OPTIONS = {\n    limit: 100,\n    offset: 0,\n    sortBy: {\n      column: 'name',\n      order: 'asc'\n    }\n  };\n  var DEFAULT_FILE_OPTIONS = {\n    cacheControl: '3600',\n    contentType: 'text/plain;charset=UTF-8',\n    upsert: false\n  };\n  var StorageFileApi = /*#__PURE__*/function () {\n    function StorageFileApi(url) {\n      var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var bucketId = arguments.length > 2 ? arguments[2] : undefined;\n      var fetch = arguments.length > 3 ? arguments[3] : undefined;\n      _classCallCheck(this, StorageFileApi);\n      this.shouldThrowOnError = false;\n      this.url = url;\n      this.headers = headers;\n      this.bucketId = bucketId;\n      this.fetch = (0, helpers_1.resolveFetch)(fetch);\n    }\n    /**\n     * Enable throwing errors instead of returning them.\n     */\n    return _createClass(StorageFileApi, [{\n      key: \"throwOnError\",\n      value: function throwOnError() {\n        this.shouldThrowOnError = true;\n        return this;\n      }\n      /**\n       * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n       *\n       * @param method HTTP method.\n       * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n       * @param fileBody The body of the file to be stored in the bucket.\n       */\n    }, {\n      key: \"uploadOrUpdate\",\n      value: function uploadOrUpdate(method, path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n          try {\n            var body;\n            var options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n            var headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n              'x-upsert': String(options.upsert)\n            });\n            var metadata = options.metadata;\n            if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n              body = new FormData();\n              body.append('cacheControl', options.cacheControl);\n              if (metadata) {\n                body.append('metadata', this.encodeMetadata(metadata));\n              }\n              body.append('', fileBody);\n            } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n              body = fileBody;\n              body.append('cacheControl', options.cacheControl);\n              if (metadata) {\n                body.append('metadata', this.encodeMetadata(metadata));\n              }\n            } else {\n              body = fileBody;\n              headers['cache-control'] = `max-age=${options.cacheControl}`;\n              headers['content-type'] = options.contentType;\n              if (metadata) {\n                headers['x-metadata'] = this.toBase64(this.encodeMetadata(metadata));\n              }\n            }\n            if (fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions.headers) {\n              headers = Object.assign(Object.assign({}, headers), fileOptions.headers);\n            }\n            var cleanPath = this._removeEmptyFolders(path);\n            var _path = this._getFinalPath(cleanPath);\n            var data = yield (method == 'PUT' ? fetch_1.put : fetch_1.post)(this.fetch, `${this.url}/object/${_path}`, body, Object.assign({\n              headers\n            }, (options === null || options === void 0 ? void 0 : options.duplex) ? {\n              duplex: options.duplex\n            } : {}));\n            return {\n              data: {\n                path: cleanPath,\n                id: data.Id,\n                fullPath: data.Key\n              },\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Uploads a file to an existing bucket.\n       *\n       * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n       * @param fileBody The body of the file to be stored in the bucket.\n       */\n    }, {\n      key: \"upload\",\n      value: function upload(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n          return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n        });\n      }\n      /**\n       * Upload a file with a token generated from `createSignedUploadUrl`.\n       * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n       * @param token The token generated from `createSignedUploadUrl`\n       * @param fileBody The body of the file to be stored in the bucket.\n       */\n    }, {\n      key: \"uploadToSignedUrl\",\n      value: function uploadToSignedUrl(path, token, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n          var cleanPath = this._removeEmptyFolders(path);\n          var _path = this._getFinalPath(cleanPath);\n          var url = new URL(this.url + `/object/upload/sign/${_path}`);\n          url.searchParams.set('token', token);\n          try {\n            var body;\n            var options = Object.assign({\n              upsert: DEFAULT_FILE_OPTIONS.upsert\n            }, fileOptions);\n            var headers = Object.assign(Object.assign({}, this.headers), {\n              'x-upsert': String(options.upsert)\n            });\n            if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n              body = new FormData();\n              body.append('cacheControl', options.cacheControl);\n              body.append('', fileBody);\n            } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n              body = fileBody;\n              body.append('cacheControl', options.cacheControl);\n            } else {\n              body = fileBody;\n              headers['cache-control'] = `max-age=${options.cacheControl}`;\n              headers['content-type'] = options.contentType;\n            }\n            var data = yield (0, fetch_1.put)(this.fetch, url.toString(), body, {\n              headers\n            });\n            return {\n              data: {\n                path: cleanPath,\n                fullPath: data.Key\n              },\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Creates a signed upload URL.\n       * Signed upload URLs can be used to upload files to the bucket without further authentication.\n       * They are valid for 2 hours.\n       * @param path The file path, including the current file name. For example `folder/image.png`.\n       * @param options.upsert If set to true, allows the file to be overwritten if it already exists.\n       */\n    }, {\n      key: \"createSignedUploadUrl\",\n      value: function createSignedUploadUrl(path, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n          try {\n            var _path = this._getFinalPath(path);\n            var headers = Object.assign({}, this.headers);\n            if (options === null || options === void 0 ? void 0 : options.upsert) {\n              headers['x-upsert'] = 'true';\n            }\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, {\n              headers\n            });\n            var url = new URL(this.url + data.url);\n            var token = url.searchParams.get('token');\n            if (!token) {\n              throw new errors_1.StorageError('No token returned by API');\n            }\n            return {\n              data: {\n                signedUrl: url.toString(),\n                path,\n                token\n              },\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Replaces an existing file at the specified path with a new one.\n       *\n       * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n       * @param fileBody The body of the file to be stored in the bucket.\n       */\n    }, {\n      key: \"update\",\n      value: function update(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n          return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n        });\n      }\n      /**\n       * Moves an existing file to a new path in the same bucket.\n       *\n       * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n       * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n       * @param options The destination options.\n       */\n    }, {\n      key: \"move\",\n      value: function move(fromPath, toPath, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n          try {\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/move`, {\n              bucketId: this.bucketId,\n              sourceKey: fromPath,\n              destinationKey: toPath,\n              destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket\n            }, {\n              headers: this.headers\n            });\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Copies an existing file to a new path in the same bucket.\n       *\n       * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n       * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n       * @param options The destination options.\n       */\n    }, {\n      key: \"copy\",\n      value: function copy(fromPath, toPath, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n          try {\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/copy`, {\n              bucketId: this.bucketId,\n              sourceKey: fromPath,\n              destinationKey: toPath,\n              destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket\n            }, {\n              headers: this.headers\n            });\n            return {\n              data: {\n                path: data.Key\n              },\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n       *\n       * @param path The file path, including the current file name. For example `folder/image.png`.\n       * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n       * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n       * @param options.transform Transform the asset before serving it to the client.\n       */\n    }, {\n      key: \"createSignedUrl\",\n      value: function createSignedUrl(path, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n          try {\n            var _path = this._getFinalPath(path);\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({\n              expiresIn\n            }, (options === null || options === void 0 ? void 0 : options.transform) ? {\n              transform: options.transform\n            } : {}), {\n              headers: this.headers\n            });\n            var downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n            var signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n            data = {\n              signedUrl\n            };\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n       *\n       * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n       * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n       * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n       */\n    }, {\n      key: \"createSignedUrls\",\n      value: function createSignedUrls(paths, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n          try {\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/sign/${this.bucketId}`, {\n              expiresIn,\n              paths\n            }, {\n              headers: this.headers\n            });\n            var downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n            return {\n              data: data.map(datum => Object.assign(Object.assign({}, datum), {\n                signedUrl: datum.signedURL ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`) : null\n              })),\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n       *\n       * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n       * @param options.transform Transform the asset before serving it to the client.\n       */\n    }, {\n      key: \"download\",\n      value: function download(path, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n          var wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n          var renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n          var transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n          var queryString = transformationQuery ? `?${transformationQuery}` : '';\n          try {\n            var _path = this._getFinalPath(path);\n            var res = yield (0, fetch_1.get)(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n              headers: this.headers,\n              noResolveJson: true\n            });\n            var data = yield res.blob();\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Retrieves the details of an existing file.\n       * @param path\n       */\n    }, {\n      key: \"info\",\n      value: function info(path) {\n        return __awaiter(this, void 0, void 0, function* () {\n          var _path = this._getFinalPath(path);\n          try {\n            var data = yield (0, fetch_1.get)(this.fetch, `${this.url}/object/info/${_path}`, {\n              headers: this.headers\n            });\n            return {\n              data: (0, helpers_1.recursiveToCamel)(data),\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Checks the existence of a file.\n       * @param path\n       */\n    }, {\n      key: \"exists\",\n      value: function exists(path) {\n        return __awaiter(this, void 0, void 0, function* () {\n          var _path = this._getFinalPath(path);\n          try {\n            yield (0, fetch_1.head)(this.fetch, `${this.url}/object/${_path}`, {\n              headers: this.headers\n            });\n            return {\n              data: true,\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error) && error instanceof errors_1.StorageUnknownError) {\n              var originalError = error.originalError;\n              if ([400, 404].includes(originalError === null || originalError === void 0 ? void 0 : originalError.status)) {\n                return {\n                  data: false,\n                  error\n                };\n              }\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n       * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n       *\n       * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n       * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n       * @param options.transform Transform the asset before serving it to the client.\n       */\n    }, {\n      key: \"getPublicUrl\",\n      value: function getPublicUrl(path, options) {\n        var _path = this._getFinalPath(path);\n        var _queryString = [];\n        var downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `download=${options.download === true ? '' : options.download}` : '';\n        if (downloadQueryParam !== '') {\n          _queryString.push(downloadQueryParam);\n        }\n        var wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n        var renderPath = wantsTransformation ? 'render/image' : 'object';\n        var transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n        if (transformationQuery !== '') {\n          _queryString.push(transformationQuery);\n        }\n        var queryString = _queryString.join('&');\n        if (queryString !== '') {\n          queryString = `?${queryString}`;\n        }\n        return {\n          data: {\n            publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`)\n          }\n        };\n      }\n      /**\n       * Deletes files within the same bucket\n       *\n       * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n       */\n    }, {\n      key: \"remove\",\n      value: function remove(paths) {\n        return __awaiter(this, void 0, void 0, function* () {\n          try {\n            var data = yield (0, fetch_1.remove)(this.fetch, `${this.url}/object/${this.bucketId}`, {\n              prefixes: paths\n            }, {\n              headers: this.headers\n            });\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * Get file metadata\n       * @param id the file id to retrieve metadata\n       */\n      // async getMetadata(\n      //   id: string\n      // ): Promise<\n      //   | {\n      //       data: Metadata\n      //       error: null\n      //     }\n      //   | {\n      //       data: null\n      //       error: StorageError\n      //     }\n      // > {\n      //   try {\n      //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n      //     return { data, error: null }\n      //   } catch (error) {\n      //     if (isStorageError(error)) {\n      //       return { data: null, error }\n      //     }\n      //     throw error\n      //   }\n      // }\n      /**\n       * Update file metadata\n       * @param id the file id to update metadata\n       * @param meta the new file metadata\n       */\n      // async updateMetadata(\n      //   id: string,\n      //   meta: Metadata\n      // ): Promise<\n      //   | {\n      //       data: Metadata\n      //       error: null\n      //     }\n      //   | {\n      //       data: null\n      //       error: StorageError\n      //     }\n      // > {\n      //   try {\n      //     const data = await post(\n      //       this.fetch,\n      //       `${this.url}/metadata/${id}`,\n      //       { ...meta },\n      //       { headers: this.headers }\n      //     )\n      //     return { data, error: null }\n      //   } catch (error) {\n      //     if (isStorageError(error)) {\n      //       return { data: null, error }\n      //     }\n      //     throw error\n      //   }\n      // }\n      /**\n       * Lists all the files and folders within a path of the bucket.\n       * @param path The folder path.\n       * @param options Search options including limit (defaults to 100), offset, sortBy, and search\n       */\n    }, {\n      key: \"list\",\n      value: function list(path, options, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n          try {\n            var body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n              prefix: path || ''\n            });\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, {\n              headers: this.headers\n            }, parameters);\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n      /**\n       * @experimental this method signature might change in the future\n       * @param options search options\n       * @param parameters\n       */\n    }, {\n      key: \"listV2\",\n      value: function listV2(options, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n          try {\n            var body = Object.assign({}, options);\n            var data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/list-v2/${this.bucketId}`, body, {\n              headers: this.headers\n            }, parameters);\n            return {\n              data,\n              error: null\n            };\n          } catch (error) {\n            if (this.shouldThrowOnError) {\n              throw error;\n            }\n            if ((0, errors_1.isStorageError)(error)) {\n              return {\n                data: null,\n                error\n              };\n            }\n            throw error;\n          }\n        });\n      }\n    }, {\n      key: \"encodeMetadata\",\n      value: function encodeMetadata(metadata) {\n        return JSON.stringify(metadata);\n      }\n    }, {\n      key: \"toBase64\",\n      value: function toBase64(data) {\n        if (typeof Buffer !== 'undefined') {\n          return Buffer.from(data).toString('base64');\n        }\n        return btoa(data);\n      }\n    }, {\n      key: \"_getFinalPath\",\n      value: function _getFinalPath(path) {\n        return `${this.bucketId}/${path.replace(/^\\/+/, '')}`;\n      }\n    }, {\n      key: \"_removeEmptyFolders\",\n      value: function _removeEmptyFolders(path) {\n        return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n      }\n    }, {\n      key: \"transformOptsToQueryString\",\n      value: function transformOptsToQueryString(transform) {\n        var params = [];\n        if (transform.width) {\n          params.push(`width=${transform.width}`);\n        }\n        if (transform.height) {\n          params.push(`height=${transform.height}`);\n        }\n        if (transform.resize) {\n          params.push(`resize=${transform.resize}`);\n        }\n        if (transform.format) {\n          params.push(`format=${transform.format}`);\n        }\n        if (transform.quality) {\n          params.push(`quality=${transform.quality}`);\n        }\n        return params.join('&');\n      }\n    }]);\n  }();\n  exports.default = StorageFileApi;\n});","lineCount":778,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_classCallCheck"],[4,21,1,13],[4,24,1,13,"require"],[4,31,1,13],[4,32,1,13,"_dependencyMap"],[4,46,1,13],[4,92,1,13,"default"],[4,99,1,13],[5,2,1,13],[5,6,1,13,"_createClass"],[5,18,1,13],[5,21,1,13,"require"],[5,28,1,13],[5,29,1,13,"_dependencyMap"],[5,43,1,13],[5,86,1,13,"default"],[5,93,1,13],[6,2,2,0],[6,6,2,4,"__awaiter"],[6,15,2,13],[6,18,2,17],[6,22,2,21],[6,26,2,25],[6,30,2,29],[6,31,2,30,"__awaiter"],[6,40,2,39],[6,44,2,44],[6,54,2,54,"thisArg"],[6,61,2,61],[6,63,2,63,"_arguments"],[6,73,2,73],[6,75,2,75,"P"],[6,76,2,76],[6,78,2,78,"generator"],[6,87,2,87],[6,89,2,89],[7,4,3,4],[7,13,3,13,"adopt"],[7,18,3,18,"adopt"],[7,19,3,19,"value"],[7,24,3,24],[7,26,3,26],[8,6,3,28],[8,13,3,35,"value"],[8,18,3,40],[8,30,3,52,"P"],[8,31,3,53],[8,34,3,56,"value"],[8,39,3,61],[8,42,3,64],[8,46,3,68,"P"],[8,47,3,69],[8,48,3,70],[8,58,3,80,"resolve"],[8,65,3,87],[8,67,3,89],[9,8,3,91,"resolve"],[9,15,3,98],[9,16,3,99,"value"],[9,21,3,104],[9,22,3,105],[10,6,3,107],[10,7,3,108],[10,8,3,109],[11,4,3,111],[12,4,4,4],[12,11,4,11],[12,16,4,16,"P"],[12,17,4,17],[12,22,4,22,"P"],[12,23,4,23],[12,26,4,26,"Promise"],[12,33,4,33],[12,34,4,34],[12,36,4,36],[12,46,4,46,"resolve"],[12,53,4,53],[12,55,4,55,"reject"],[12,61,4,61],[12,63,4,63],[13,6,5,8],[13,15,5,17,"fulfilled"],[13,24,5,26,"fulfilled"],[13,25,5,27,"value"],[13,30,5,32],[13,32,5,34],[14,8,5,36],[14,12,5,40],[15,10,5,42,"step"],[15,14,5,46],[15,15,5,47,"generator"],[15,24,5,56],[15,25,5,57,"next"],[15,29,5,61],[15,30,5,62,"value"],[15,35,5,67],[15,36,5,68],[15,37,5,69],[16,8,5,71],[16,9,5,72],[16,10,5,73],[16,17,5,80,"e"],[16,18,5,81],[16,20,5,83],[17,10,5,85,"reject"],[17,16,5,91],[17,17,5,92,"e"],[17,18,5,93],[17,19,5,94],[18,8,5,96],[19,6,5,98],[20,6,6,8],[20,15,6,17,"rejected"],[20,23,6,25,"rejected"],[20,24,6,26,"value"],[20,29,6,31],[20,31,6,33],[21,8,6,35],[21,12,6,39],[22,10,6,41,"step"],[22,14,6,45],[22,15,6,46,"generator"],[22,24,6,55],[22,25,6,56],[22,32,6,63],[22,33,6,64],[22,34,6,65,"value"],[22,39,6,70],[22,40,6,71],[22,41,6,72],[23,8,6,74],[23,9,6,75],[23,10,6,76],[23,17,6,83,"e"],[23,18,6,84],[23,20,6,86],[24,10,6,88,"reject"],[24,16,6,94],[24,17,6,95,"e"],[24,18,6,96],[24,19,6,97],[25,8,6,99],[26,6,6,101],[27,6,7,8],[27,15,7,17,"step"],[27,19,7,21,"step"],[27,20,7,22,"result"],[27,26,7,28],[27,28,7,30],[28,8,7,32,"result"],[28,14,7,38],[28,15,7,39,"done"],[28,19,7,43],[28,22,7,46,"resolve"],[28,29,7,53],[28,30,7,54,"result"],[28,36,7,60],[28,37,7,61,"value"],[28,42,7,66],[28,43,7,67],[28,46,7,70,"adopt"],[28,51,7,75],[28,52,7,76,"result"],[28,58,7,82],[28,59,7,83,"value"],[28,64,7,88],[28,65,7,89],[28,66,7,90,"then"],[28,70,7,94],[28,71,7,95,"fulfilled"],[28,80,7,104],[28,82,7,106,"rejected"],[28,90,7,114],[28,91,7,115],[29,6,7,117],[30,6,8,8,"step"],[30,10,8,12],[30,11,8,13],[30,12,8,14,"generator"],[30,21,8,23],[30,24,8,26,"generator"],[30,33,8,35],[30,34,8,36,"apply"],[30,39,8,41],[30,40,8,42,"thisArg"],[30,47,8,49],[30,49,8,51,"_arguments"],[30,59,8,61],[30,63,8,65],[30,65,8,67],[30,66,8,68],[30,68,8,70,"next"],[30,72,8,74],[30,73,8,75],[30,74,8,76],[30,75,8,77],[31,4,9,4],[31,5,9,5],[31,6,9,6],[32,2,10,0],[32,3,10,1],[33,2,11,0,"Object"],[33,8,11,6],[33,9,11,7,"defineProperty"],[33,23,11,21],[33,24,11,22,"exports"],[33,31,11,29],[33,33,11,31],[33,45,11,43],[33,47,11,45],[34,4,11,47,"value"],[34,9,11,52],[34,11,11,54],[35,2,11,59],[35,3,11,60],[35,4,11,61],[36,2,12,0],[36,6,12,6,"errors_1"],[36,14,12,14],[36,17,12,17,"require"],[36,24,12,24],[36,25,12,24,"_dependencyMap"],[36,39,12,24],[36,59,12,40],[36,60,12,41],[37,2,13,0],[37,6,13,6,"fetch_1"],[37,13,13,13],[37,16,13,16,"require"],[37,23,13,23],[37,24,13,23,"_dependencyMap"],[37,38,13,23],[37,57,13,38],[37,58,13,39],[38,2,14,0],[38,6,14,6,"helpers_1"],[38,15,14,15],[38,18,14,18,"require"],[38,25,14,25],[38,26,14,25,"_dependencyMap"],[38,40,14,25],[38,61,14,42],[38,62,14,43],[39,2,15,0],[39,6,15,6,"DEFAULT_SEARCH_OPTIONS"],[39,28,15,28],[39,31,15,31],[40,4,16,4,"limit"],[40,9,16,9],[40,11,16,11],[40,14,16,14],[41,4,17,4,"offset"],[41,10,17,10],[41,12,17,12],[41,13,17,13],[42,4,18,4,"sortBy"],[42,10,18,10],[42,12,18,12],[43,6,19,8,"column"],[43,12,19,14],[43,14,19,16],[43,20,19,22],[44,6,20,8,"order"],[44,11,20,13],[44,13,20,15],[45,4,21,4],[46,2,22,0],[46,3,22,1],[47,2,23,0],[47,6,23,6,"DEFAULT_FILE_OPTIONS"],[47,26,23,26],[47,29,23,29],[48,4,24,4,"cacheControl"],[48,16,24,16],[48,18,24,18],[48,24,24,24],[49,4,25,4,"contentType"],[49,15,25,15],[49,17,25,17],[49,43,25,43],[50,4,26,4,"upsert"],[50,10,26,10],[50,12,26,12],[51,2,27,0],[51,3,27,1],[52,2,27,2],[52,6,28,6,"StorageFileApi"],[52,20,28,20],[53,4,29,4],[53,13,29,4,"StorageFileApi"],[53,28,29,16,"url"],[53,31,29,19],[53,33,29,52],[54,6,29,52],[54,10,29,21,"headers"],[54,17,29,28],[54,20,29,28,"arguments"],[54,29,29,28],[54,30,29,28,"length"],[54,36,29,28],[54,44,29,28,"arguments"],[54,53,29,28],[54,61,29,28,"undefined"],[54,70,29,28],[54,73,29,28,"arguments"],[54,82,29,28],[54,88,29,31],[54,89,29,32],[54,90,29,33],[55,6,29,33],[55,10,29,35,"bucketId"],[55,18,29,43],[55,21,29,43,"arguments"],[55,30,29,43],[55,31,29,43,"length"],[55,37,29,43],[55,44,29,43,"arguments"],[55,53,29,43],[55,59,29,43,"undefined"],[55,68,29,43],[56,6,29,43],[56,10,29,45,"fetch"],[56,15,29,50],[56,18,29,50,"arguments"],[56,27,29,50],[56,28,29,50,"length"],[56,34,29,50],[56,41,29,50,"arguments"],[56,50,29,50],[56,56,29,50,"undefined"],[56,65,29,50],[57,6,29,50,"_classCallCheck"],[57,21,29,50],[57,28,29,50,"StorageFileApi"],[57,42,29,50],[58,6,30,8],[58,10,30,12],[58,11,30,13,"shouldThrowOnError"],[58,29,30,31],[58,32,30,34],[58,37,30,39],[59,6,31,8],[59,10,31,12],[59,11,31,13,"url"],[59,14,31,16],[59,17,31,19,"url"],[59,20,31,22],[60,6,32,8],[60,10,32,12],[60,11,32,13,"headers"],[60,18,32,20],[60,21,32,23,"headers"],[60,28,32,30],[61,6,33,8],[61,10,33,12],[61,11,33,13,"bucketId"],[61,19,33,21],[61,22,33,24,"bucketId"],[61,30,33,32],[62,6,34,8],[62,10,34,12],[62,11,34,13,"fetch"],[62,16,34,18],[62,19,34,21],[62,20,34,22],[62,21,34,23],[62,23,34,25,"helpers_1"],[62,32,34,34],[62,33,34,35,"resolveFetch"],[62,45,34,47],[62,47,34,49,"fetch"],[62,52,34,54],[62,53,34,55],[63,4,35,4],[64,4,36,4],[65,0,37,0],[66,0,38,0],[67,4,36,4],[67,11,36,4,"_createClass"],[67,23,36,4],[67,24,36,4,"StorageFileApi"],[67,38,36,4],[68,6,36,4,"key"],[68,9,36,4],[69,6,36,4,"value"],[69,11,36,4],[69,13,39,4],[69,22,39,4,"throwOnError"],[69,34,39,16,"throwOnError"],[69,35,39,16],[69,37,39,19],[70,8,40,8],[70,12,40,12],[70,13,40,13,"shouldThrowOnError"],[70,31,40,31],[70,34,40,34],[70,38,40,38],[71,8,41,8],[71,15,41,15],[71,19,41,19],[72,6,42,4],[73,6,43,4],[74,0,44,0],[75,0,45,0],[76,0,46,0],[77,0,47,0],[78,0,48,0],[79,0,49,0],[80,4,43,4],[81,6,43,4,"key"],[81,9,43,4],[82,6,43,4,"value"],[82,11,43,4],[82,13,50,4],[82,22,50,4,"uploadOrUpdate"],[82,36,50,18,"uploadOrUpdate"],[82,37,50,19,"method"],[82,43,50,25],[82,45,50,27,"path"],[82,49,50,31],[82,51,50,33,"fileBody"],[82,59,50,41],[82,61,50,43,"fileOptions"],[82,72,50,54],[82,74,50,56],[83,8,51,8],[83,15,51,15,"__awaiter"],[83,24,51,24],[83,25,51,25],[83,29,51,29],[83,31,51,31],[83,36,51,36],[83,37,51,37],[83,39,51,39],[83,44,51,44],[83,45,51,45],[83,47,51,47],[83,60,51,60],[84,10,52,12],[84,14,52,16],[85,12,53,16],[85,16,53,20,"body"],[85,20,53,24],[86,12,54,16],[86,16,54,22,"options"],[86,23,54,29],[86,26,54,32,"Object"],[86,32,54,38],[86,33,54,39,"assign"],[86,39,54,45],[86,40,54,46,"Object"],[86,46,54,52],[86,47,54,53,"assign"],[86,53,54,59],[86,54,54,60],[86,55,54,61],[86,56,54,62],[86,58,54,64,"DEFAULT_FILE_OPTIONS"],[86,78,54,84],[86,79,54,85],[86,81,54,87,"fileOptions"],[86,92,54,98],[86,93,54,99],[87,12,55,16],[87,16,55,20,"headers"],[87,23,55,27],[87,26,55,30,"Object"],[87,32,55,36],[87,33,55,37,"assign"],[87,39,55,43],[87,40,55,44,"Object"],[87,46,55,50],[87,47,55,51,"assign"],[87,53,55,57],[87,54,55,58],[87,55,55,59],[87,56,55,60],[87,58,55,62],[87,62,55,66],[87,63,55,67,"headers"],[87,70,55,74],[87,71,55,75],[87,73,55,78,"method"],[87,79,55,84],[87,84,55,89],[87,90,55,95],[87,94,55,99],[88,14,55,101],[88,24,55,111],[88,26,55,113,"String"],[88,32,55,119],[88,33,55,120,"options"],[88,40,55,127],[88,41,55,128,"upsert"],[88,47,55,134],[89,12,55,136],[89,13,55,138],[89,14,55,139],[90,12,56,16],[90,16,56,22,"metadata"],[90,24,56,30],[90,27,56,33,"options"],[90,34,56,40],[90,35,56,41,"metadata"],[90,43,56,49],[91,12,57,16],[91,16,57,20],[91,23,57,27,"Blob"],[91,27,57,31],[91,32,57,36],[91,43,57,47],[91,47,57,51,"fileBody"],[91,55,57,59],[91,67,57,71,"Blob"],[91,71,57,75],[91,73,57,77],[92,14,58,20,"body"],[92,18,58,24],[92,21,58,27],[92,25,58,31,"FormData"],[92,33,58,39],[92,34,58,40],[92,35,58,41],[93,14,59,20,"body"],[93,18,59,24],[93,19,59,25,"append"],[93,25,59,31],[93,26,59,32],[93,40,59,46],[93,42,59,48,"options"],[93,49,59,55],[93,50,59,56,"cacheControl"],[93,62,59,68],[93,63,59,69],[94,14,60,20],[94,18,60,24,"metadata"],[94,26,60,32],[94,28,60,34],[95,16,61,24,"body"],[95,20,61,28],[95,21,61,29,"append"],[95,27,61,35],[95,28,61,36],[95,38,61,46],[95,40,61,48],[95,44,61,52],[95,45,61,53,"encodeMetadata"],[95,59,61,67],[95,60,61,68,"metadata"],[95,68,61,76],[95,69,61,77],[95,70,61,78],[96,14,62,20],[97,14,63,20,"body"],[97,18,63,24],[97,19,63,25,"append"],[97,25,63,31],[97,26,63,32],[97,28,63,34],[97,30,63,36,"fileBody"],[97,38,63,44],[97,39,63,45],[98,12,64,16],[98,13,64,17],[98,19,65,21],[98,23,65,25],[98,30,65,32,"FormData"],[98,38,65,40],[98,43,65,45],[98,54,65,56],[98,58,65,60,"fileBody"],[98,66,65,68],[98,78,65,80,"FormData"],[98,86,65,88],[98,88,65,90],[99,14,66,20,"body"],[99,18,66,24],[99,21,66,27,"fileBody"],[99,29,66,35],[100,14,67,20,"body"],[100,18,67,24],[100,19,67,25,"append"],[100,25,67,31],[100,26,67,32],[100,40,67,46],[100,42,67,48,"options"],[100,49,67,55],[100,50,67,56,"cacheControl"],[100,62,67,68],[100,63,67,69],[101,14,68,20],[101,18,68,24,"metadata"],[101,26,68,32],[101,28,68,34],[102,16,69,24,"body"],[102,20,69,28],[102,21,69,29,"append"],[102,27,69,35],[102,28,69,36],[102,38,69,46],[102,40,69,48],[102,44,69,52],[102,45,69,53,"encodeMetadata"],[102,59,69,67],[102,60,69,68,"metadata"],[102,68,69,76],[102,69,69,77],[102,70,69,78],[103,14,70,20],[104,12,71,16],[104,13,71,17],[104,19,72,21],[105,14,73,20,"body"],[105,18,73,24],[105,21,73,27,"fileBody"],[105,29,73,35],[106,14,74,20,"headers"],[106,21,74,27],[106,22,74,28],[106,37,74,43],[106,38,74,44],[106,41,74,47],[106,52,74,58,"options"],[106,59,74,65],[106,60,74,66,"cacheControl"],[106,72,74,78],[106,74,74,80],[107,14,75,20,"headers"],[107,21,75,27],[107,22,75,28],[107,36,75,42],[107,37,75,43],[107,40,75,46,"options"],[107,47,75,53],[107,48,75,54,"contentType"],[107,59,75,65],[108,14,76,20],[108,18,76,24,"metadata"],[108,26,76,32],[108,28,76,34],[109,16,77,24,"headers"],[109,23,77,31],[109,24,77,32],[109,36,77,44],[109,37,77,45],[109,40,77,48],[109,44,77,52],[109,45,77,53,"toBase64"],[109,53,77,61],[109,54,77,62],[109,58,77,66],[109,59,77,67,"encodeMetadata"],[109,73,77,81],[109,74,77,82,"metadata"],[109,82,77,90],[109,83,77,91],[109,84,77,92],[110,14,78,20],[111,12,79,16],[112,12,80,16],[112,16,80,20,"fileOptions"],[112,27,80,31],[112,32,80,36],[112,36,80,40],[112,40,80,44,"fileOptions"],[112,51,80,55],[112,56,80,60],[112,61,80,65],[112,62,80,66],[112,65,80,69],[112,70,80,74],[112,71,80,75],[112,74,80,78,"fileOptions"],[112,85,80,89],[112,86,80,90,"headers"],[112,93,80,97],[112,95,80,99],[113,14,81,20,"headers"],[113,21,81,27],[113,24,81,30,"Object"],[113,30,81,36],[113,31,81,37,"assign"],[113,37,81,43],[113,38,81,44,"Object"],[113,44,81,50],[113,45,81,51,"assign"],[113,51,81,57],[113,52,81,58],[113,53,81,59],[113,54,81,60],[113,56,81,62,"headers"],[113,63,81,69],[113,64,81,70],[113,66,81,72,"fileOptions"],[113,77,81,83],[113,78,81,84,"headers"],[113,85,81,91],[113,86,81,92],[114,12,82,16],[115,12,83,16],[115,16,83,22,"cleanPath"],[115,25,83,31],[115,28,83,34],[115,32,83,38],[115,33,83,39,"_removeEmptyFolders"],[115,52,83,58],[115,53,83,59,"path"],[115,57,83,63],[115,58,83,64],[116,12,84,16],[116,16,84,22,"_path"],[116,21,84,27],[116,24,84,30],[116,28,84,34],[116,29,84,35,"_getFinalPath"],[116,42,84,48],[116,43,84,49,"cleanPath"],[116,52,84,58],[116,53,84,59],[117,12,85,16],[117,16,85,22,"data"],[117,20,85,26],[117,23,85,29],[117,29,85,35],[117,30,85,36,"method"],[117,36,85,42],[117,40,85,46],[117,45,85,51],[117,48,85,54,"fetch_1"],[117,55,85,61],[117,56,85,62,"put"],[117,59,85,65],[117,62,85,68,"fetch_1"],[117,69,85,75],[117,70,85,76,"post"],[117,74,85,80],[117,76,85,82],[117,80,85,86],[117,81,85,87,"fetch"],[117,86,85,92],[117,88,85,94],[117,91,85,97],[117,95,85,101],[117,96,85,102,"url"],[117,99,85,105],[117,110,85,116,"_path"],[117,115,85,121],[117,117,85,123],[117,119,85,125,"body"],[117,123,85,129],[117,125,85,131,"Object"],[117,131,85,137],[117,132,85,138,"assign"],[117,138,85,144],[117,139,85,145],[118,14,85,147,"headers"],[119,12,85,155],[119,13,85,156],[119,15,85,159],[119,16,85,160,"options"],[119,23,85,167],[119,28,85,172],[119,32,85,176],[119,36,85,180,"options"],[119,43,85,187],[119,48,85,192],[119,53,85,197],[119,54,85,198],[119,57,85,201],[119,62,85,206],[119,63,85,207],[119,66,85,210,"options"],[119,73,85,217],[119,74,85,218,"duplex"],[119,80,85,224],[119,84,85,228],[120,14,85,230,"duplex"],[120,20,85,236],[120,22,85,238,"options"],[120,29,85,245],[120,30,85,246,"duplex"],[121,12,85,253],[121,13,85,254],[121,16,85,257],[121,17,85,258],[121,18,85,260],[121,19,85,261],[121,20,85,262],[122,12,86,16],[122,19,86,23],[123,14,87,20,"data"],[123,18,87,24],[123,20,87,26],[124,16,87,28,"path"],[124,20,87,32],[124,22,87,34,"cleanPath"],[124,31,87,43],[125,16,87,45,"id"],[125,18,87,47],[125,20,87,49,"data"],[125,24,87,53],[125,25,87,54,"Id"],[125,27,87,56],[126,16,87,58,"fullPath"],[126,24,87,66],[126,26,87,68,"data"],[126,30,87,72],[126,31,87,73,"Key"],[127,14,87,77],[127,15,87,78],[128,14,88,20,"error"],[128,19,88,25],[128,21,88,27],[129,12,89,16],[129,13,89,17],[130,10,90,12],[130,11,90,13],[130,12,91,12],[130,19,91,19,"error"],[130,24,91,24],[130,26,91,26],[131,12,92,16],[131,16,92,20],[131,20,92,24],[131,21,92,25,"shouldThrowOnError"],[131,39,92,43],[131,41,92,45],[132,14,93,20],[132,20,93,26,"error"],[132,25,93,31],[133,12,94,16],[134,12,95,16],[134,16,95,20],[134,17,95,21],[134,18,95,22],[134,20,95,24,"errors_1"],[134,28,95,32],[134,29,95,33,"isStorageError"],[134,43,95,47],[134,45,95,49,"error"],[134,50,95,54],[134,51,95,55],[134,53,95,57],[135,14,96,20],[135,21,96,27],[136,16,96,29,"data"],[136,20,96,33],[136,22,96,35],[136,26,96,39],[137,16,96,41,"error"],[138,14,96,47],[138,15,96,48],[139,12,97,16],[140,12,98,16],[140,18,98,22,"error"],[140,23,98,27],[141,10,99,12],[142,8,100,8],[142,9,100,9],[142,10,100,10],[143,6,101,4],[144,6,102,4],[145,0,103,0],[146,0,104,0],[147,0,105,0],[148,0,106,0],[149,0,107,0],[150,4,102,4],[151,6,102,4,"key"],[151,9,102,4],[152,6,102,4,"value"],[152,11,102,4],[152,13,108,4],[152,22,108,4,"upload"],[152,28,108,10,"upload"],[152,29,108,11,"path"],[152,33,108,15],[152,35,108,17,"fileBody"],[152,43,108,25],[152,45,108,27,"fileOptions"],[152,56,108,38],[152,58,108,40],[153,8,109,8],[153,15,109,15,"__awaiter"],[153,24,109,24],[153,25,109,25],[153,29,109,29],[153,31,109,31],[153,36,109,36],[153,37,109,37],[153,39,109,39],[153,44,109,44],[153,45,109,45],[153,47,109,47],[153,60,109,60],[154,10,110,12],[154,17,110,19],[154,21,110,23],[154,22,110,24,"uploadOrUpdate"],[154,36,110,38],[154,37,110,39],[154,43,110,45],[154,45,110,47,"path"],[154,49,110,51],[154,51,110,53,"fileBody"],[154,59,110,61],[154,61,110,63,"fileOptions"],[154,72,110,74],[154,73,110,75],[155,8,111,8],[155,9,111,9],[155,10,111,10],[156,6,112,4],[157,6,113,4],[158,0,114,0],[159,0,115,0],[160,0,116,0],[161,0,117,0],[162,0,118,0],[163,4,113,4],[164,6,113,4,"key"],[164,9,113,4],[165,6,113,4,"value"],[165,11,113,4],[165,13,119,4],[165,22,119,4,"uploadToSignedUrl"],[165,39,119,21,"uploadToSignedUrl"],[165,40,119,22,"path"],[165,44,119,26],[165,46,119,28,"token"],[165,51,119,33],[165,53,119,35,"fileBody"],[165,61,119,43],[165,63,119,45,"fileOptions"],[165,74,119,56],[165,76,119,58],[166,8,120,8],[166,15,120,15,"__awaiter"],[166,24,120,24],[166,25,120,25],[166,29,120,29],[166,31,120,31],[166,36,120,36],[166,37,120,37],[166,39,120,39],[166,44,120,44],[166,45,120,45],[166,47,120,47],[166,60,120,60],[167,10,121,12],[167,14,121,18,"cleanPath"],[167,23,121,27],[167,26,121,30],[167,30,121,34],[167,31,121,35,"_removeEmptyFolders"],[167,50,121,54],[167,51,121,55,"path"],[167,55,121,59],[167,56,121,60],[168,10,122,12],[168,14,122,18,"_path"],[168,19,122,23],[168,22,122,26],[168,26,122,30],[168,27,122,31,"_getFinalPath"],[168,40,122,44],[168,41,122,45,"cleanPath"],[168,50,122,54],[168,51,122,55],[169,10,123,12],[169,14,123,18,"url"],[169,17,123,21],[169,20,123,24],[169,24,123,28,"URL"],[169,27,123,31],[169,28,123,32],[169,32,123,36],[169,33,123,37,"url"],[169,36,123,40],[169,39,123,43],[169,62,123,66,"_path"],[169,67,123,71],[169,69,123,73],[169,70,123,74],[170,10,124,12,"url"],[170,13,124,15],[170,14,124,16,"searchParams"],[170,26,124,28],[170,27,124,29,"set"],[170,30,124,32],[170,31,124,33],[170,38,124,40],[170,40,124,42,"token"],[170,45,124,47],[170,46,124,48],[171,10,125,12],[171,14,125,16],[172,12,126,16],[172,16,126,20,"body"],[172,20,126,24],[173,12,127,16],[173,16,127,22,"options"],[173,23,127,29],[173,26,127,32,"Object"],[173,32,127,38],[173,33,127,39,"assign"],[173,39,127,45],[173,40,127,46],[174,14,127,48,"upsert"],[174,20,127,54],[174,22,127,56,"DEFAULT_FILE_OPTIONS"],[174,42,127,76],[174,43,127,77,"upsert"],[175,12,127,84],[175,13,127,85],[175,15,127,87,"fileOptions"],[175,26,127,98],[175,27,127,99],[176,12,128,16],[176,16,128,22,"headers"],[176,23,128,29],[176,26,128,32,"Object"],[176,32,128,38],[176,33,128,39,"assign"],[176,39,128,45],[176,40,128,46,"Object"],[176,46,128,52],[176,47,128,53,"assign"],[176,53,128,59],[176,54,128,60],[176,55,128,61],[176,56,128,62],[176,58,128,64],[176,62,128,68],[176,63,128,69,"headers"],[176,70,128,76],[176,71,128,77],[176,73,128,79],[177,14,128,81],[177,24,128,91],[177,26,128,93,"String"],[177,32,128,99],[177,33,128,100,"options"],[177,40,128,107],[177,41,128,108,"upsert"],[177,47,128,114],[178,12,128,116],[178,13,128,117],[178,14,128,118],[179,12,129,16],[179,16,129,20],[179,23,129,27,"Blob"],[179,27,129,31],[179,32,129,36],[179,43,129,47],[179,47,129,51,"fileBody"],[179,55,129,59],[179,67,129,71,"Blob"],[179,71,129,75],[179,73,129,77],[180,14,130,20,"body"],[180,18,130,24],[180,21,130,27],[180,25,130,31,"FormData"],[180,33,130,39],[180,34,130,40],[180,35,130,41],[181,14,131,20,"body"],[181,18,131,24],[181,19,131,25,"append"],[181,25,131,31],[181,26,131,32],[181,40,131,46],[181,42,131,48,"options"],[181,49,131,55],[181,50,131,56,"cacheControl"],[181,62,131,68],[181,63,131,69],[182,14,132,20,"body"],[182,18,132,24],[182,19,132,25,"append"],[182,25,132,31],[182,26,132,32],[182,28,132,34],[182,30,132,36,"fileBody"],[182,38,132,44],[182,39,132,45],[183,12,133,16],[183,13,133,17],[183,19,134,21],[183,23,134,25],[183,30,134,32,"FormData"],[183,38,134,40],[183,43,134,45],[183,54,134,56],[183,58,134,60,"fileBody"],[183,66,134,68],[183,78,134,80,"FormData"],[183,86,134,88],[183,88,134,90],[184,14,135,20,"body"],[184,18,135,24],[184,21,135,27,"fileBody"],[184,29,135,35],[185,14,136,20,"body"],[185,18,136,24],[185,19,136,25,"append"],[185,25,136,31],[185,26,136,32],[185,40,136,46],[185,42,136,48,"options"],[185,49,136,55],[185,50,136,56,"cacheControl"],[185,62,136,68],[185,63,136,69],[186,12,137,16],[186,13,137,17],[186,19,138,21],[187,14,139,20,"body"],[187,18,139,24],[187,21,139,27,"fileBody"],[187,29,139,35],[188,14,140,20,"headers"],[188,21,140,27],[188,22,140,28],[188,37,140,43],[188,38,140,44],[188,41,140,47],[188,52,140,58,"options"],[188,59,140,65],[188,60,140,66,"cacheControl"],[188,72,140,78],[188,74,140,80],[189,14,141,20,"headers"],[189,21,141,27],[189,22,141,28],[189,36,141,42],[189,37,141,43],[189,40,141,46,"options"],[189,47,141,53],[189,48,141,54,"contentType"],[189,59,141,65],[190,12,142,16],[191,12,143,16],[191,16,143,22,"data"],[191,20,143,26],[191,23,143,29],[191,29,143,35],[191,30,143,36],[191,31,143,37],[191,33,143,39,"fetch_1"],[191,40,143,46],[191,41,143,47,"put"],[191,44,143,50],[191,46,143,52],[191,50,143,56],[191,51,143,57,"fetch"],[191,56,143,62],[191,58,143,64,"url"],[191,61,143,67],[191,62,143,68,"toString"],[191,70,143,76],[191,71,143,77],[191,72,143,78],[191,74,143,80,"body"],[191,78,143,84],[191,80,143,86],[192,14,143,88,"headers"],[193,12,143,96],[193,13,143,97],[193,14,143,98],[194,12,144,16],[194,19,144,23],[195,14,145,20,"data"],[195,18,145,24],[195,20,145,26],[196,16,145,28,"path"],[196,20,145,32],[196,22,145,34,"cleanPath"],[196,31,145,43],[197,16,145,45,"fullPath"],[197,24,145,53],[197,26,145,55,"data"],[197,30,145,59],[197,31,145,60,"Key"],[198,14,145,64],[198,15,145,65],[199,14,146,20,"error"],[199,19,146,25],[199,21,146,27],[200,12,147,16],[200,13,147,17],[201,10,148,12],[201,11,148,13],[201,12,149,12],[201,19,149,19,"error"],[201,24,149,24],[201,26,149,26],[202,12,150,16],[202,16,150,20],[202,20,150,24],[202,21,150,25,"shouldThrowOnError"],[202,39,150,43],[202,41,150,45],[203,14,151,20],[203,20,151,26,"error"],[203,25,151,31],[204,12,152,16],[205,12,153,16],[205,16,153,20],[205,17,153,21],[205,18,153,22],[205,20,153,24,"errors_1"],[205,28,153,32],[205,29,153,33,"isStorageError"],[205,43,153,47],[205,45,153,49,"error"],[205,50,153,54],[205,51,153,55],[205,53,153,57],[206,14,154,20],[206,21,154,27],[207,16,154,29,"data"],[207,20,154,33],[207,22,154,35],[207,26,154,39],[208,16,154,41,"error"],[209,14,154,47],[209,15,154,48],[210,12,155,16],[211,12,156,16],[211,18,156,22,"error"],[211,23,156,27],[212,10,157,12],[213,8,158,8],[213,9,158,9],[213,10,158,10],[214,6,159,4],[215,6,160,4],[216,0,161,0],[217,0,162,0],[218,0,163,0],[219,0,164,0],[220,0,165,0],[221,0,166,0],[222,4,160,4],[223,6,160,4,"key"],[223,9,160,4],[224,6,160,4,"value"],[224,11,160,4],[224,13,167,4],[224,22,167,4,"createSignedUploadUrl"],[224,43,167,25,"createSignedUploadUrl"],[224,44,167,26,"path"],[224,48,167,30],[224,50,167,32,"options"],[224,57,167,39],[224,59,167,41],[225,8,168,8],[225,15,168,15,"__awaiter"],[225,24,168,24],[225,25,168,25],[225,29,168,29],[225,31,168,31],[225,36,168,36],[225,37,168,37],[225,39,168,39],[225,44,168,44],[225,45,168,45],[225,47,168,47],[225,60,168,60],[226,10,169,12],[226,14,169,16],[227,12,170,16],[227,16,170,20,"_path"],[227,21,170,25],[227,24,170,28],[227,28,170,32],[227,29,170,33,"_getFinalPath"],[227,42,170,46],[227,43,170,47,"path"],[227,47,170,51],[227,48,170,52],[228,12,171,16],[228,16,171,22,"headers"],[228,23,171,29],[228,26,171,32,"Object"],[228,32,171,38],[228,33,171,39,"assign"],[228,39,171,45],[228,40,171,46],[228,41,171,47],[228,42,171,48],[228,44,171,50],[228,48,171,54],[228,49,171,55,"headers"],[228,56,171,62],[228,57,171,63],[229,12,172,16],[229,16,172,20,"options"],[229,23,172,27],[229,28,172,32],[229,32,172,36],[229,36,172,40,"options"],[229,43,172,47],[229,48,172,52],[229,53,172,57],[229,54,172,58],[229,57,172,61],[229,62,172,66],[229,63,172,67],[229,66,172,70,"options"],[229,73,172,77],[229,74,172,78,"upsert"],[229,80,172,84],[229,82,172,86],[230,14,173,20,"headers"],[230,21,173,27],[230,22,173,28],[230,32,173,38],[230,33,173,39],[230,36,173,42],[230,42,173,48],[231,12,174,16],[232,12,175,16],[232,16,175,22,"data"],[232,20,175,26],[232,23,175,29],[232,29,175,35],[232,30,175,36],[232,31,175,37],[232,33,175,39,"fetch_1"],[232,40,175,46],[232,41,175,47,"post"],[232,45,175,51],[232,47,175,53],[232,51,175,57],[232,52,175,58,"fetch"],[232,57,175,63],[232,59,175,65],[232,62,175,68],[232,66,175,72],[232,67,175,73,"url"],[232,70,175,76],[232,93,175,99,"_path"],[232,98,175,104],[232,100,175,106],[232,102,175,108],[232,103,175,109],[232,104,175,110],[232,106,175,112],[233,14,175,114,"headers"],[234,12,175,122],[234,13,175,123],[234,14,175,124],[235,12,176,16],[235,16,176,22,"url"],[235,19,176,25],[235,22,176,28],[235,26,176,32,"URL"],[235,29,176,35],[235,30,176,36],[235,34,176,40],[235,35,176,41,"url"],[235,38,176,44],[235,41,176,47,"data"],[235,45,176,51],[235,46,176,52,"url"],[235,49,176,55],[235,50,176,56],[236,12,177,16],[236,16,177,22,"token"],[236,21,177,27],[236,24,177,30,"url"],[236,27,177,33],[236,28,177,34,"searchParams"],[236,40,177,46],[236,41,177,47,"get"],[236,44,177,50],[236,45,177,51],[236,52,177,58],[236,53,177,59],[237,12,178,16],[237,16,178,20],[237,17,178,21,"token"],[237,22,178,26],[237,24,178,28],[238,14,179,20],[238,20,179,26],[238,24,179,30,"errors_1"],[238,32,179,38],[238,33,179,39,"StorageError"],[238,45,179,51],[238,46,179,52],[238,72,179,78],[238,73,179,79],[239,12,180,16],[240,12,181,16],[240,19,181,23],[241,14,181,25,"data"],[241,18,181,29],[241,20,181,31],[242,16,181,33,"signedUrl"],[242,25,181,42],[242,27,181,44,"url"],[242,30,181,47],[242,31,181,48,"toString"],[242,39,181,56],[242,40,181,57],[242,41,181,58],[243,16,181,60,"path"],[243,20,181,64],[244,16,181,66,"token"],[245,14,181,72],[245,15,181,73],[246,14,181,75,"error"],[246,19,181,80],[246,21,181,82],[247,12,181,87],[247,13,181,88],[248,10,182,12],[248,11,182,13],[248,12,183,12],[248,19,183,19,"error"],[248,24,183,24],[248,26,183,26],[249,12,184,16],[249,16,184,20],[249,20,184,24],[249,21,184,25,"shouldThrowOnError"],[249,39,184,43],[249,41,184,45],[250,14,185,20],[250,20,185,26,"error"],[250,25,185,31],[251,12,186,16],[252,12,187,16],[252,16,187,20],[252,17,187,21],[252,18,187,22],[252,20,187,24,"errors_1"],[252,28,187,32],[252,29,187,33,"isStorageError"],[252,43,187,47],[252,45,187,49,"error"],[252,50,187,54],[252,51,187,55],[252,53,187,57],[253,14,188,20],[253,21,188,27],[254,16,188,29,"data"],[254,20,188,33],[254,22,188,35],[254,26,188,39],[255,16,188,41,"error"],[256,14,188,47],[256,15,188,48],[257,12,189,16],[258,12,190,16],[258,18,190,22,"error"],[258,23,190,27],[259,10,191,12],[260,8,192,8],[260,9,192,9],[260,10,192,10],[261,6,193,4],[262,6,194,4],[263,0,195,0],[264,0,196,0],[265,0,197,0],[266,0,198,0],[267,0,199,0],[268,4,194,4],[269,6,194,4,"key"],[269,9,194,4],[270,6,194,4,"value"],[270,11,194,4],[270,13,200,4],[270,22,200,4,"update"],[270,28,200,10,"update"],[270,29,200,11,"path"],[270,33,200,15],[270,35,200,17,"fileBody"],[270,43,200,25],[270,45,200,27,"fileOptions"],[270,56,200,38],[270,58,200,40],[271,8,201,8],[271,15,201,15,"__awaiter"],[271,24,201,24],[271,25,201,25],[271,29,201,29],[271,31,201,31],[271,36,201,36],[271,37,201,37],[271,39,201,39],[271,44,201,44],[271,45,201,45],[271,47,201,47],[271,60,201,60],[272,10,202,12],[272,17,202,19],[272,21,202,23],[272,22,202,24,"uploadOrUpdate"],[272,36,202,38],[272,37,202,39],[272,42,202,44],[272,44,202,46,"path"],[272,48,202,50],[272,50,202,52,"fileBody"],[272,58,202,60],[272,60,202,62,"fileOptions"],[272,71,202,73],[272,72,202,74],[273,8,203,8],[273,9,203,9],[273,10,203,10],[274,6,204,4],[275,6,205,4],[276,0,206,0],[277,0,207,0],[278,0,208,0],[279,0,209,0],[280,0,210,0],[281,0,211,0],[282,4,205,4],[283,6,205,4,"key"],[283,9,205,4],[284,6,205,4,"value"],[284,11,205,4],[284,13,212,4],[284,22,212,4,"move"],[284,26,212,8,"move"],[284,27,212,9,"fromPath"],[284,35,212,17],[284,37,212,19,"toPath"],[284,43,212,25],[284,45,212,27,"options"],[284,52,212,34],[284,54,212,36],[285,8,213,8],[285,15,213,15,"__awaiter"],[285,24,213,24],[285,25,213,25],[285,29,213,29],[285,31,213,31],[285,36,213,36],[285,37,213,37],[285,39,213,39],[285,44,213,44],[285,45,213,45],[285,47,213,47],[285,60,213,60],[286,10,214,12],[286,14,214,16],[287,12,215,16],[287,16,215,22,"data"],[287,20,215,26],[287,23,215,29],[287,29,215,35],[287,30,215,36],[287,31,215,37],[287,33,215,39,"fetch_1"],[287,40,215,46],[287,41,215,47,"post"],[287,45,215,51],[287,47,215,53],[287,51,215,57],[287,52,215,58,"fetch"],[287,57,215,63],[287,59,215,65],[287,62,215,68],[287,66,215,72],[287,67,215,73,"url"],[287,70,215,76],[287,84,215,90],[287,86,215,92],[288,14,216,20,"bucketId"],[288,22,216,28],[288,24,216,30],[288,28,216,34],[288,29,216,35,"bucketId"],[288,37,216,43],[289,14,217,20,"sourceKey"],[289,23,217,29],[289,25,217,31,"fromPath"],[289,33,217,39],[290,14,218,20,"destinationKey"],[290,28,218,34],[290,30,218,36,"toPath"],[290,36,218,42],[291,14,219,20,"destinationBucket"],[291,31,219,37],[291,33,219,39,"options"],[291,40,219,46],[291,45,219,51],[291,49,219,55],[291,53,219,59,"options"],[291,60,219,66],[291,65,219,71],[291,70,219,76],[291,71,219,77],[291,74,219,80],[291,79,219,85],[291,80,219,86],[291,83,219,89,"options"],[291,90,219,96],[291,91,219,97,"destinationBucket"],[292,12,220,16],[292,13,220,17],[292,15,220,19],[293,14,220,21,"headers"],[293,21,220,28],[293,23,220,30],[293,27,220,34],[293,28,220,35,"headers"],[294,12,220,43],[294,13,220,44],[294,14,220,45],[295,12,221,16],[295,19,221,23],[296,14,221,25,"data"],[296,18,221,29],[297,14,221,31,"error"],[297,19,221,36],[297,21,221,38],[298,12,221,43],[298,13,221,44],[299,10,222,12],[299,11,222,13],[299,12,223,12],[299,19,223,19,"error"],[299,24,223,24],[299,26,223,26],[300,12,224,16],[300,16,224,20],[300,20,224,24],[300,21,224,25,"shouldThrowOnError"],[300,39,224,43],[300,41,224,45],[301,14,225,20],[301,20,225,26,"error"],[301,25,225,31],[302,12,226,16],[303,12,227,16],[303,16,227,20],[303,17,227,21],[303,18,227,22],[303,20,227,24,"errors_1"],[303,28,227,32],[303,29,227,33,"isStorageError"],[303,43,227,47],[303,45,227,49,"error"],[303,50,227,54],[303,51,227,55],[303,53,227,57],[304,14,228,20],[304,21,228,27],[305,16,228,29,"data"],[305,20,228,33],[305,22,228,35],[305,26,228,39],[306,16,228,41,"error"],[307,14,228,47],[307,15,228,48],[308,12,229,16],[309,12,230,16],[309,18,230,22,"error"],[309,23,230,27],[310,10,231,12],[311,8,232,8],[311,9,232,9],[311,10,232,10],[312,6,233,4],[313,6,234,4],[314,0,235,0],[315,0,236,0],[316,0,237,0],[317,0,238,0],[318,0,239,0],[319,0,240,0],[320,4,234,4],[321,6,234,4,"key"],[321,9,234,4],[322,6,234,4,"value"],[322,11,234,4],[322,13,241,4],[322,22,241,4,"copy"],[322,26,241,8,"copy"],[322,27,241,9,"fromPath"],[322,35,241,17],[322,37,241,19,"toPath"],[322,43,241,25],[322,45,241,27,"options"],[322,52,241,34],[322,54,241,36],[323,8,242,8],[323,15,242,15,"__awaiter"],[323,24,242,24],[323,25,242,25],[323,29,242,29],[323,31,242,31],[323,36,242,36],[323,37,242,37],[323,39,242,39],[323,44,242,44],[323,45,242,45],[323,47,242,47],[323,60,242,60],[324,10,243,12],[324,14,243,16],[325,12,244,16],[325,16,244,22,"data"],[325,20,244,26],[325,23,244,29],[325,29,244,35],[325,30,244,36],[325,31,244,37],[325,33,244,39,"fetch_1"],[325,40,244,46],[325,41,244,47,"post"],[325,45,244,51],[325,47,244,53],[325,51,244,57],[325,52,244,58,"fetch"],[325,57,244,63],[325,59,244,65],[325,62,244,68],[325,66,244,72],[325,67,244,73,"url"],[325,70,244,76],[325,84,244,90],[325,86,244,92],[326,14,245,20,"bucketId"],[326,22,245,28],[326,24,245,30],[326,28,245,34],[326,29,245,35,"bucketId"],[326,37,245,43],[327,14,246,20,"sourceKey"],[327,23,246,29],[327,25,246,31,"fromPath"],[327,33,246,39],[328,14,247,20,"destinationKey"],[328,28,247,34],[328,30,247,36,"toPath"],[328,36,247,42],[329,14,248,20,"destinationBucket"],[329,31,248,37],[329,33,248,39,"options"],[329,40,248,46],[329,45,248,51],[329,49,248,55],[329,53,248,59,"options"],[329,60,248,66],[329,65,248,71],[329,70,248,76],[329,71,248,77],[329,74,248,80],[329,79,248,85],[329,80,248,86],[329,83,248,89,"options"],[329,90,248,96],[329,91,248,97,"destinationBucket"],[330,12,249,16],[330,13,249,17],[330,15,249,19],[331,14,249,21,"headers"],[331,21,249,28],[331,23,249,30],[331,27,249,34],[331,28,249,35,"headers"],[332,12,249,43],[332,13,249,44],[332,14,249,45],[333,12,250,16],[333,19,250,23],[334,14,250,25,"data"],[334,18,250,29],[334,20,250,31],[335,16,250,33,"path"],[335,20,250,37],[335,22,250,39,"data"],[335,26,250,43],[335,27,250,44,"Key"],[336,14,250,48],[336,15,250,49],[337,14,250,51,"error"],[337,19,250,56],[337,21,250,58],[338,12,250,63],[338,13,250,64],[339,10,251,12],[339,11,251,13],[339,12,252,12],[339,19,252,19,"error"],[339,24,252,24],[339,26,252,26],[340,12,253,16],[340,16,253,20],[340,20,253,24],[340,21,253,25,"shouldThrowOnError"],[340,39,253,43],[340,41,253,45],[341,14,254,20],[341,20,254,26,"error"],[341,25,254,31],[342,12,255,16],[343,12,256,16],[343,16,256,20],[343,17,256,21],[343,18,256,22],[343,20,256,24,"errors_1"],[343,28,256,32],[343,29,256,33,"isStorageError"],[343,43,256,47],[343,45,256,49,"error"],[343,50,256,54],[343,51,256,55],[343,53,256,57],[344,14,257,20],[344,21,257,27],[345,16,257,29,"data"],[345,20,257,33],[345,22,257,35],[345,26,257,39],[346,16,257,41,"error"],[347,14,257,47],[347,15,257,48],[348,12,258,16],[349,12,259,16],[349,18,259,22,"error"],[349,23,259,27],[350,10,260,12],[351,8,261,8],[351,9,261,9],[351,10,261,10],[352,6,262,4],[353,6,263,4],[354,0,264,0],[355,0,265,0],[356,0,266,0],[357,0,267,0],[358,0,268,0],[359,0,269,0],[360,0,270,0],[361,4,263,4],[362,6,263,4,"key"],[362,9,263,4],[363,6,263,4,"value"],[363,11,263,4],[363,13,271,4],[363,22,271,4,"createSignedUrl"],[363,37,271,19,"createSignedUrl"],[363,38,271,20,"path"],[363,42,271,24],[363,44,271,26,"expiresIn"],[363,53,271,35],[363,55,271,37,"options"],[363,62,271,44],[363,64,271,46],[364,8,272,8],[364,15,272,15,"__awaiter"],[364,24,272,24],[364,25,272,25],[364,29,272,29],[364,31,272,31],[364,36,272,36],[364,37,272,37],[364,39,272,39],[364,44,272,44],[364,45,272,45],[364,47,272,47],[364,60,272,60],[365,10,273,12],[365,14,273,16],[366,12,274,16],[366,16,274,20,"_path"],[366,21,274,25],[366,24,274,28],[366,28,274,32],[366,29,274,33,"_getFinalPath"],[366,42,274,46],[366,43,274,47,"path"],[366,47,274,51],[366,48,274,52],[367,12,275,16],[367,16,275,20,"data"],[367,20,275,24],[367,23,275,27],[367,29,275,33],[367,30,275,34],[367,31,275,35],[367,33,275,37,"fetch_1"],[367,40,275,44],[367,41,275,45,"post"],[367,45,275,49],[367,47,275,51],[367,51,275,55],[367,52,275,56,"fetch"],[367,57,275,61],[367,59,275,63],[367,62,275,66],[367,66,275,70],[367,67,275,71,"url"],[367,70,275,74],[367,86,275,90,"_path"],[367,91,275,95],[367,93,275,97],[367,95,275,99,"Object"],[367,101,275,105],[367,102,275,106,"assign"],[367,108,275,112],[367,109,275,113],[368,14,275,115,"expiresIn"],[369,12,275,125],[369,13,275,126],[369,15,275,129],[369,16,275,130,"options"],[369,23,275,137],[369,28,275,142],[369,32,275,146],[369,36,275,150,"options"],[369,43,275,157],[369,48,275,162],[369,53,275,167],[369,54,275,168],[369,57,275,171],[369,62,275,176],[369,63,275,177],[369,66,275,180,"options"],[369,73,275,187],[369,74,275,188,"transform"],[369,83,275,197],[369,87,275,201],[370,14,275,203,"transform"],[370,23,275,212],[370,25,275,214,"options"],[370,32,275,221],[370,33,275,222,"transform"],[371,12,275,232],[371,13,275,233],[371,16,275,236],[371,17,275,237],[371,18,275,239],[371,19,275,240],[371,21,275,242],[372,14,275,244,"headers"],[372,21,275,251],[372,23,275,253],[372,27,275,257],[372,28,275,258,"headers"],[373,12,275,266],[373,13,275,267],[373,14,275,268],[374,12,276,16],[374,16,276,22,"downloadQueryParam"],[374,34,276,40],[374,37,276,43],[374,38,276,44,"options"],[374,45,276,51],[374,50,276,56],[374,54,276,60],[374,58,276,64,"options"],[374,65,276,71],[374,70,276,76],[374,75,276,81],[374,76,276,82],[374,79,276,85],[374,84,276,90],[374,85,276,91],[374,88,276,94,"options"],[374,95,276,101],[374,96,276,102,"download"],[374,104,276,110],[374,108,277,22],[374,121,277,35,"options"],[374,128,277,42],[374,129,277,43,"download"],[374,137,277,51],[374,142,277,56],[374,146,277,60],[374,149,277,63],[374,151,277,65],[374,154,277,68,"options"],[374,161,277,75],[374,162,277,76,"download"],[374,170,277,84],[374,172,277,86],[374,175,278,22],[374,177,278,24],[375,12,279,16],[375,16,279,22,"signedUrl"],[375,25,279,31],[375,28,279,34,"encodeURI"],[375,37,279,43],[375,38,279,44],[375,41,279,47],[375,45,279,51],[375,46,279,52,"url"],[375,49,279,55],[375,52,279,58,"data"],[375,56,279,62],[375,57,279,63,"signedURL"],[375,66,279,72],[375,69,279,75,"downloadQueryParam"],[375,87,279,93],[375,89,279,95],[375,90,279,96],[376,12,280,16,"data"],[376,16,280,20],[376,19,280,23],[377,14,280,25,"signedUrl"],[378,12,280,35],[378,13,280,36],[379,12,281,16],[379,19,281,23],[380,14,281,25,"data"],[380,18,281,29],[381,14,281,31,"error"],[381,19,281,36],[381,21,281,38],[382,12,281,43],[382,13,281,44],[383,10,282,12],[383,11,282,13],[383,12,283,12],[383,19,283,19,"error"],[383,24,283,24],[383,26,283,26],[384,12,284,16],[384,16,284,20],[384,20,284,24],[384,21,284,25,"shouldThrowOnError"],[384,39,284,43],[384,41,284,45],[385,14,285,20],[385,20,285,26,"error"],[385,25,285,31],[386,12,286,16],[387,12,287,16],[387,16,287,20],[387,17,287,21],[387,18,287,22],[387,20,287,24,"errors_1"],[387,28,287,32],[387,29,287,33,"isStorageError"],[387,43,287,47],[387,45,287,49,"error"],[387,50,287,54],[387,51,287,55],[387,53,287,57],[388,14,288,20],[388,21,288,27],[389,16,288,29,"data"],[389,20,288,33],[389,22,288,35],[389,26,288,39],[390,16,288,41,"error"],[391,14,288,47],[391,15,288,48],[392,12,289,16],[393,12,290,16],[393,18,290,22,"error"],[393,23,290,27],[394,10,291,12],[395,8,292,8],[395,9,292,9],[395,10,292,10],[396,6,293,4],[397,6,294,4],[398,0,295,0],[399,0,296,0],[400,0,297,0],[401,0,298,0],[402,0,299,0],[403,0,300,0],[404,4,294,4],[405,6,294,4,"key"],[405,9,294,4],[406,6,294,4,"value"],[406,11,294,4],[406,13,301,4],[406,22,301,4,"createSignedUrls"],[406,38,301,20,"createSignedUrls"],[406,39,301,21,"paths"],[406,44,301,26],[406,46,301,28,"expiresIn"],[406,55,301,37],[406,57,301,39,"options"],[406,64,301,46],[406,66,301,48],[407,8,302,8],[407,15,302,15,"__awaiter"],[407,24,302,24],[407,25,302,25],[407,29,302,29],[407,31,302,31],[407,36,302,36],[407,37,302,37],[407,39,302,39],[407,44,302,44],[407,45,302,45],[407,47,302,47],[407,60,302,60],[408,10,303,12],[408,14,303,16],[409,12,304,16],[409,16,304,22,"data"],[409,20,304,26],[409,23,304,29],[409,29,304,35],[409,30,304,36],[409,31,304,37],[409,33,304,39,"fetch_1"],[409,40,304,46],[409,41,304,47,"post"],[409,45,304,51],[409,47,304,53],[409,51,304,57],[409,52,304,58,"fetch"],[409,57,304,63],[409,59,304,65],[409,62,304,68],[409,66,304,72],[409,67,304,73,"url"],[409,70,304,76],[409,86,304,92],[409,90,304,96],[409,91,304,97,"bucketId"],[409,99,304,105],[409,101,304,107],[409,103,304,109],[410,14,304,111,"expiresIn"],[410,23,304,120],[411,14,304,122,"paths"],[412,12,304,128],[412,13,304,129],[412,15,304,131],[413,14,304,133,"headers"],[413,21,304,140],[413,23,304,142],[413,27,304,146],[413,28,304,147,"headers"],[414,12,304,155],[414,13,304,156],[414,14,304,157],[415,12,305,16],[415,16,305,22,"downloadQueryParam"],[415,34,305,40],[415,37,305,43],[415,38,305,44,"options"],[415,45,305,51],[415,50,305,56],[415,54,305,60],[415,58,305,64,"options"],[415,65,305,71],[415,70,305,76],[415,75,305,81],[415,76,305,82],[415,79,305,85],[415,84,305,90],[415,85,305,91],[415,88,305,94,"options"],[415,95,305,101],[415,96,305,102,"download"],[415,104,305,110],[415,108,306,22],[415,121,306,35,"options"],[415,128,306,42],[415,129,306,43,"download"],[415,137,306,51],[415,142,306,56],[415,146,306,60],[415,149,306,63],[415,151,306,65],[415,154,306,68,"options"],[415,161,306,75],[415,162,306,76,"download"],[415,170,306,84],[415,172,306,86],[415,175,307,22],[415,177,307,24],[416,12,308,16],[416,19,308,23],[417,14,309,20,"data"],[417,18,309,24],[417,20,309,26,"data"],[417,24,309,30],[417,25,309,31,"map"],[417,28,309,34],[417,29,309,36,"datum"],[417,34,309,41],[417,38,309,47,"Object"],[417,44,309,53],[417,45,309,54,"assign"],[417,51,309,60],[417,52,309,61,"Object"],[417,58,309,67],[417,59,309,68,"assign"],[417,65,309,74],[417,66,309,75],[417,67,309,76],[417,68,309,77],[417,70,309,79,"datum"],[417,75,309,84],[417,76,309,85],[417,78,309,87],[418,16,309,89,"signedUrl"],[418,25,309,98],[418,27,309,100,"datum"],[418,32,309,105],[418,33,309,106,"signedURL"],[418,42,309,115],[418,45,310,30,"encodeURI"],[418,54,310,39],[418,55,310,40],[418,58,310,43],[418,62,310,47],[418,63,310,48,"url"],[418,66,310,51],[418,69,310,54,"datum"],[418,74,310,59],[418,75,310,60,"signedURL"],[418,84,310,69],[418,87,310,72,"downloadQueryParam"],[418,105,310,90],[418,107,310,92],[418,108,310,93],[418,111,311,30],[419,14,311,35],[419,15,311,36],[419,16,311,38],[419,17,311,39],[420,14,312,20,"error"],[420,19,312,25],[420,21,312,27],[421,12,313,16],[421,13,313,17],[422,10,314,12],[422,11,314,13],[422,12,315,12],[422,19,315,19,"error"],[422,24,315,24],[422,26,315,26],[423,12,316,16],[423,16,316,20],[423,20,316,24],[423,21,316,25,"shouldThrowOnError"],[423,39,316,43],[423,41,316,45],[424,14,317,20],[424,20,317,26,"error"],[424,25,317,31],[425,12,318,16],[426,12,319,16],[426,16,319,20],[426,17,319,21],[426,18,319,22],[426,20,319,24,"errors_1"],[426,28,319,32],[426,29,319,33,"isStorageError"],[426,43,319,47],[426,45,319,49,"error"],[426,50,319,54],[426,51,319,55],[426,53,319,57],[427,14,320,20],[427,21,320,27],[428,16,320,29,"data"],[428,20,320,33],[428,22,320,35],[428,26,320,39],[429,16,320,41,"error"],[430,14,320,47],[430,15,320,48],[431,12,321,16],[432,12,322,16],[432,18,322,22,"error"],[432,23,322,27],[433,10,323,12],[434,8,324,8],[434,9,324,9],[434,10,324,10],[435,6,325,4],[436,6,326,4],[437,0,327,0],[438,0,328,0],[439,0,329,0],[440,0,330,0],[441,0,331,0],[442,4,326,4],[443,6,326,4,"key"],[443,9,326,4],[444,6,326,4,"value"],[444,11,326,4],[444,13,332,4],[444,22,332,4,"download"],[444,30,332,12,"download"],[444,31,332,13,"path"],[444,35,332,17],[444,37,332,19,"options"],[444,44,332,26],[444,46,332,28],[445,8,333,8],[445,15,333,15,"__awaiter"],[445,24,333,24],[445,25,333,25],[445,29,333,29],[445,31,333,31],[445,36,333,36],[445,37,333,37],[445,39,333,39],[445,44,333,44],[445,45,333,45],[445,47,333,47],[445,60,333,60],[446,10,334,12],[446,14,334,18,"wantsTransformation"],[446,33,334,37],[446,36,334,40],[446,44,334,48,"options"],[446,51,334,55],[446,56,334,60],[446,60,334,64],[446,64,334,68,"options"],[446,71,334,75],[446,76,334,80],[446,81,334,85],[446,82,334,86],[446,85,334,89],[446,90,334,94],[446,91,334,95],[446,94,334,98,"options"],[446,101,334,105],[446,102,334,106,"transform"],[446,111,334,115],[446,112,334,116],[446,117,334,121],[446,128,334,132],[447,10,335,12],[447,14,335,18,"renderPath"],[447,24,335,28],[447,27,335,31,"wantsTransformation"],[447,46,335,50],[447,49,335,53],[447,77,335,81],[447,80,335,84],[447,88,335,92],[448,10,336,12],[448,14,336,18,"transformationQuery"],[448,33,336,37],[448,36,336,40],[448,40,336,44],[448,41,336,45,"transformOptsToQueryString"],[448,67,336,71],[448,68,336,72],[448,69,336,73,"options"],[448,76,336,80],[448,81,336,85],[448,85,336,89],[448,89,336,93,"options"],[448,96,336,100],[448,101,336,105],[448,106,336,110],[448,107,336,111],[448,110,336,114],[448,115,336,119],[448,116,336,120],[448,119,336,123,"options"],[448,126,336,130],[448,127,336,131,"transform"],[448,136,336,140],[448,141,336,145],[448,142,336,146],[448,143,336,147],[448,144,336,148],[449,10,337,12],[449,14,337,18,"queryString"],[449,25,337,29],[449,28,337,32,"transformationQuery"],[449,47,337,51],[449,50,337,54],[449,54,337,58,"transformationQuery"],[449,73,337,77],[449,75,337,79],[449,78,337,82],[449,80,337,84],[450,10,338,12],[450,14,338,16],[451,12,339,16],[451,16,339,22,"_path"],[451,21,339,27],[451,24,339,30],[451,28,339,34],[451,29,339,35,"_getFinalPath"],[451,42,339,48],[451,43,339,49,"path"],[451,47,339,53],[451,48,339,54],[452,12,340,16],[452,16,340,22,"res"],[452,19,340,25],[452,22,340,28],[452,28,340,34],[452,29,340,35],[452,30,340,36],[452,32,340,38,"fetch_1"],[452,39,340,45],[452,40,340,46,"get"],[452,43,340,49],[452,45,340,51],[452,49,340,55],[452,50,340,56,"fetch"],[452,55,340,61],[452,57,340,63],[452,60,340,66],[452,64,340,70],[452,65,340,71,"url"],[452,68,340,74],[452,72,340,78,"renderPath"],[452,82,340,88],[452,86,340,92,"_path"],[452,91,340,97],[452,94,340,100,"queryString"],[452,105,340,111],[452,107,340,113],[452,109,340,115],[453,14,341,20,"headers"],[453,21,341,27],[453,23,341,29],[453,27,341,33],[453,28,341,34,"headers"],[453,35,341,41],[454,14,342,20,"noResolveJson"],[454,27,342,33],[454,29,342,35],[455,12,343,16],[455,13,343,17],[455,14,343,18],[456,12,344,16],[456,16,344,22,"data"],[456,20,344,26],[456,23,344,29],[456,29,344,35,"res"],[456,32,344,38],[456,33,344,39,"blob"],[456,37,344,43],[456,38,344,44],[456,39,344,45],[457,12,345,16],[457,19,345,23],[458,14,345,25,"data"],[458,18,345,29],[459,14,345,31,"error"],[459,19,345,36],[459,21,345,38],[460,12,345,43],[460,13,345,44],[461,10,346,12],[461,11,346,13],[461,12,347,12],[461,19,347,19,"error"],[461,24,347,24],[461,26,347,26],[462,12,348,16],[462,16,348,20],[462,20,348,24],[462,21,348,25,"shouldThrowOnError"],[462,39,348,43],[462,41,348,45],[463,14,349,20],[463,20,349,26,"error"],[463,25,349,31],[464,12,350,16],[465,12,351,16],[465,16,351,20],[465,17,351,21],[465,18,351,22],[465,20,351,24,"errors_1"],[465,28,351,32],[465,29,351,33,"isStorageError"],[465,43,351,47],[465,45,351,49,"error"],[465,50,351,54],[465,51,351,55],[465,53,351,57],[466,14,352,20],[466,21,352,27],[467,16,352,29,"data"],[467,20,352,33],[467,22,352,35],[467,26,352,39],[468,16,352,41,"error"],[469,14,352,47],[469,15,352,48],[470,12,353,16],[471,12,354,16],[471,18,354,22,"error"],[471,23,354,27],[472,10,355,12],[473,8,356,8],[473,9,356,9],[473,10,356,10],[474,6,357,4],[475,6,358,4],[476,0,359,0],[477,0,360,0],[478,0,361,0],[479,4,358,4],[480,6,358,4,"key"],[480,9,358,4],[481,6,358,4,"value"],[481,11,358,4],[481,13,362,4],[481,22,362,4,"info"],[481,26,362,8,"info"],[481,27,362,9,"path"],[481,31,362,13],[481,33,362,15],[482,8,363,8],[482,15,363,15,"__awaiter"],[482,24,363,24],[482,25,363,25],[482,29,363,29],[482,31,363,31],[482,36,363,36],[482,37,363,37],[482,39,363,39],[482,44,363,44],[482,45,363,45],[482,47,363,47],[482,60,363,60],[483,10,364,12],[483,14,364,18,"_path"],[483,19,364,23],[483,22,364,26],[483,26,364,30],[483,27,364,31,"_getFinalPath"],[483,40,364,44],[483,41,364,45,"path"],[483,45,364,49],[483,46,364,50],[484,10,365,12],[484,14,365,16],[485,12,366,16],[485,16,366,22,"data"],[485,20,366,26],[485,23,366,29],[485,29,366,35],[485,30,366,36],[485,31,366,37],[485,33,366,39,"fetch_1"],[485,40,366,46],[485,41,366,47,"get"],[485,44,366,50],[485,46,366,52],[485,50,366,56],[485,51,366,57,"fetch"],[485,56,366,62],[485,58,366,64],[485,61,366,67],[485,65,366,71],[485,66,366,72,"url"],[485,69,366,75],[485,85,366,91,"_path"],[485,90,366,96],[485,92,366,98],[485,94,366,100],[486,14,367,20,"headers"],[486,21,367,27],[486,23,367,29],[486,27,367,33],[486,28,367,34,"headers"],[487,12,368,16],[487,13,368,17],[487,14,368,18],[488,12,369,16],[488,19,369,23],[489,14,369,25,"data"],[489,18,369,29],[489,20,369,31],[489,21,369,32],[489,22,369,33],[489,24,369,35,"helpers_1"],[489,33,369,44],[489,34,369,45,"recursiveToCamel"],[489,50,369,61],[489,52,369,63,"data"],[489,56,369,67],[489,57,369,68],[490,14,369,70,"error"],[490,19,369,75],[490,21,369,77],[491,12,369,82],[491,13,369,83],[492,10,370,12],[492,11,370,13],[492,12,371,12],[492,19,371,19,"error"],[492,24,371,24],[492,26,371,26],[493,12,372,16],[493,16,372,20],[493,20,372,24],[493,21,372,25,"shouldThrowOnError"],[493,39,372,43],[493,41,372,45],[494,14,373,20],[494,20,373,26,"error"],[494,25,373,31],[495,12,374,16],[496,12,375,16],[496,16,375,20],[496,17,375,21],[496,18,375,22],[496,20,375,24,"errors_1"],[496,28,375,32],[496,29,375,33,"isStorageError"],[496,43,375,47],[496,45,375,49,"error"],[496,50,375,54],[496,51,375,55],[496,53,375,57],[497,14,376,20],[497,21,376,27],[498,16,376,29,"data"],[498,20,376,33],[498,22,376,35],[498,26,376,39],[499,16,376,41,"error"],[500,14,376,47],[500,15,376,48],[501,12,377,16],[502,12,378,16],[502,18,378,22,"error"],[502,23,378,27],[503,10,379,12],[504,8,380,8],[504,9,380,9],[504,10,380,10],[505,6,381,4],[506,6,382,4],[507,0,383,0],[508,0,384,0],[509,0,385,0],[510,4,382,4],[511,6,382,4,"key"],[511,9,382,4],[512,6,382,4,"value"],[512,11,382,4],[512,13,386,4],[512,22,386,4,"exists"],[512,28,386,10,"exists"],[512,29,386,11,"path"],[512,33,386,15],[512,35,386,17],[513,8,387,8],[513,15,387,15,"__awaiter"],[513,24,387,24],[513,25,387,25],[513,29,387,29],[513,31,387,31],[513,36,387,36],[513,37,387,37],[513,39,387,39],[513,44,387,44],[513,45,387,45],[513,47,387,47],[513,60,387,60],[514,10,388,12],[514,14,388,18,"_path"],[514,19,388,23],[514,22,388,26],[514,26,388,30],[514,27,388,31,"_getFinalPath"],[514,40,388,44],[514,41,388,45,"path"],[514,45,388,49],[514,46,388,50],[515,10,389,12],[515,14,389,16],[516,12,390,16],[516,18,390,22],[516,19,390,23],[516,20,390,24],[516,22,390,26,"fetch_1"],[516,29,390,33],[516,30,390,34,"head"],[516,34,390,38],[516,36,390,40],[516,40,390,44],[516,41,390,45,"fetch"],[516,46,390,50],[516,48,390,52],[516,51,390,55],[516,55,390,59],[516,56,390,60,"url"],[516,59,390,63],[516,70,390,74,"_path"],[516,75,390,79],[516,77,390,81],[516,79,390,83],[517,14,391,20,"headers"],[517,21,391,27],[517,23,391,29],[517,27,391,33],[517,28,391,34,"headers"],[518,12,392,16],[518,13,392,17],[518,14,392,18],[519,12,393,16],[519,19,393,23],[520,14,393,25,"data"],[520,18,393,29],[520,20,393,31],[520,24,393,35],[521,14,393,37,"error"],[521,19,393,42],[521,21,393,44],[522,12,393,49],[522,13,393,50],[523,10,394,12],[523,11,394,13],[523,12,395,12],[523,19,395,19,"error"],[523,24,395,24],[523,26,395,26],[524,12,396,16],[524,16,396,20],[524,20,396,24],[524,21,396,25,"shouldThrowOnError"],[524,39,396,43],[524,41,396,45],[525,14,397,20],[525,20,397,26,"error"],[525,25,397,31],[526,12,398,16],[527,12,399,16],[527,16,399,20],[527,17,399,21],[527,18,399,22],[527,20,399,24,"errors_1"],[527,28,399,32],[527,29,399,33,"isStorageError"],[527,43,399,47],[527,45,399,49,"error"],[527,50,399,54],[527,51,399,55],[527,55,399,59,"error"],[527,60,399,64],[527,72,399,76,"errors_1"],[527,80,399,84],[527,81,399,85,"StorageUnknownError"],[527,100,399,104],[527,102,399,106],[528,14,400,20],[528,18,400,26,"originalError"],[528,31,400,39],[528,34,400,42,"error"],[528,39,400,47],[528,40,400,48,"originalError"],[528,53,400,61],[529,14,401,20],[529,18,401,24],[529,19,401,25],[529,22,401,28],[529,24,401,30],[529,27,401,33],[529,28,401,34],[529,29,401,35,"includes"],[529,37,401,43],[529,38,401,44,"originalError"],[529,51,401,57],[529,56,401,62],[529,60,401,66],[529,64,401,70,"originalError"],[529,77,401,83],[529,82,401,88],[529,87,401,93],[529,88,401,94],[529,91,401,97],[529,96,401,102],[529,97,401,103],[529,100,401,106,"originalError"],[529,113,401,119],[529,114,401,120,"status"],[529,120,401,126],[529,121,401,127],[529,123,401,129],[530,16,402,24],[530,23,402,31],[531,18,402,33,"data"],[531,22,402,37],[531,24,402,39],[531,29,402,44],[532,18,402,46,"error"],[533,16,402,52],[533,17,402,53],[534,14,403,20],[535,12,404,16],[536,12,405,16],[536,18,405,22,"error"],[536,23,405,27],[537,10,406,12],[538,8,407,8],[538,9,407,9],[538,10,407,10],[539,6,408,4],[540,6,409,4],[541,0,410,0],[542,0,411,0],[543,0,412,0],[544,0,413,0],[545,0,414,0],[546,0,415,0],[547,0,416,0],[548,4,409,4],[549,6,409,4,"key"],[549,9,409,4],[550,6,409,4,"value"],[550,11,409,4],[550,13,417,4],[550,22,417,4,"getPublicUrl"],[550,34,417,16,"getPublicUrl"],[550,35,417,17,"path"],[550,39,417,21],[550,41,417,23,"options"],[550,48,417,30],[550,50,417,32],[551,8,418,8],[551,12,418,14,"_path"],[551,17,418,19],[551,20,418,22],[551,24,418,26],[551,25,418,27,"_getFinalPath"],[551,38,418,40],[551,39,418,41,"path"],[551,43,418,45],[551,44,418,46],[552,8,419,8],[552,12,419,14,"_queryString"],[552,24,419,26],[552,27,419,29],[552,29,419,31],[553,8,420,8],[553,12,420,14,"downloadQueryParam"],[553,30,420,32],[553,33,420,35],[553,34,420,36,"options"],[553,41,420,43],[553,46,420,48],[553,50,420,52],[553,54,420,56,"options"],[553,61,420,63],[553,66,420,68],[553,71,420,73],[553,72,420,74],[553,75,420,77],[553,80,420,82],[553,81,420,83],[553,84,420,86,"options"],[553,91,420,93],[553,92,420,94,"download"],[553,100,420,102],[553,104,421,14],[553,116,421,26,"options"],[553,123,421,33],[553,124,421,34,"download"],[553,132,421,42],[553,137,421,47],[553,141,421,51],[553,144,421,54],[553,146,421,56],[553,149,421,59,"options"],[553,156,421,66],[553,157,421,67,"download"],[553,165,421,75],[553,167,421,77],[553,170,422,14],[553,172,422,16],[554,8,423,8],[554,12,423,12,"downloadQueryParam"],[554,30,423,30],[554,35,423,35],[554,37,423,37],[554,39,423,39],[555,10,424,12,"_queryString"],[555,22,424,24],[555,23,424,25,"push"],[555,27,424,29],[555,28,424,30,"downloadQueryParam"],[555,46,424,48],[555,47,424,49],[556,8,425,8],[557,8,426,8],[557,12,426,14,"wantsTransformation"],[557,31,426,33],[557,34,426,36],[557,42,426,44,"options"],[557,49,426,51],[557,54,426,56],[557,58,426,60],[557,62,426,64,"options"],[557,69,426,71],[557,74,426,76],[557,79,426,81],[557,80,426,82],[557,83,426,85],[557,88,426,90],[557,89,426,91],[557,92,426,94,"options"],[557,99,426,101],[557,100,426,102,"transform"],[557,109,426,111],[557,110,426,112],[557,115,426,117],[557,126,426,128],[558,8,427,8],[558,12,427,14,"renderPath"],[558,22,427,24],[558,25,427,27,"wantsTransformation"],[558,44,427,46],[558,47,427,49],[558,61,427,63],[558,64,427,66],[558,72,427,74],[559,8,428,8],[559,12,428,14,"transformationQuery"],[559,31,428,33],[559,34,428,36],[559,38,428,40],[559,39,428,41,"transformOptsToQueryString"],[559,65,428,67],[559,66,428,68],[559,67,428,69,"options"],[559,74,428,76],[559,79,428,81],[559,83,428,85],[559,87,428,89,"options"],[559,94,428,96],[559,99,428,101],[559,104,428,106],[559,105,428,107],[559,108,428,110],[559,113,428,115],[559,114,428,116],[559,117,428,119,"options"],[559,124,428,126],[559,125,428,127,"transform"],[559,134,428,136],[559,139,428,141],[559,140,428,142],[559,141,428,143],[559,142,428,144],[560,8,429,8],[560,12,429,12,"transformationQuery"],[560,31,429,31],[560,36,429,36],[560,38,429,38],[560,40,429,40],[561,10,430,12,"_queryString"],[561,22,430,24],[561,23,430,25,"push"],[561,27,430,29],[561,28,430,30,"transformationQuery"],[561,47,430,49],[561,48,430,50],[562,8,431,8],[563,8,432,8],[563,12,432,12,"queryString"],[563,23,432,23],[563,26,432,26,"_queryString"],[563,38,432,38],[563,39,432,39,"join"],[563,43,432,43],[563,44,432,44],[563,47,432,47],[563,48,432,48],[564,8,433,8],[564,12,433,12,"queryString"],[564,23,433,23],[564,28,433,28],[564,30,433,30],[564,32,433,32],[565,10,434,12,"queryString"],[565,21,434,23],[565,24,434,26],[565,28,434,30,"queryString"],[565,39,434,41],[565,41,434,43],[566,8,435,8],[567,8,436,8],[567,15,436,15],[568,10,437,12,"data"],[568,14,437,16],[568,16,437,18],[569,12,437,20,"publicUrl"],[569,21,437,29],[569,23,437,31,"encodeURI"],[569,32,437,40],[569,33,437,41],[569,36,437,44],[569,40,437,48],[569,41,437,49,"url"],[569,44,437,52],[569,48,437,56,"renderPath"],[569,58,437,66],[569,69,437,77,"_path"],[569,74,437,82],[569,77,437,85,"queryString"],[569,88,437,96],[569,90,437,98],[570,10,437,100],[571,8,438,8],[571,9,438,9],[572,6,439,4],[573,6,440,4],[574,0,441,0],[575,0,442,0],[576,0,443,0],[577,0,444,0],[578,4,440,4],[579,6,440,4,"key"],[579,9,440,4],[580,6,440,4,"value"],[580,11,440,4],[580,13,445,4],[580,22,445,4,"remove"],[580,28,445,10,"remove"],[580,29,445,11,"paths"],[580,34,445,16],[580,36,445,18],[581,8,446,8],[581,15,446,15,"__awaiter"],[581,24,446,24],[581,25,446,25],[581,29,446,29],[581,31,446,31],[581,36,446,36],[581,37,446,37],[581,39,446,39],[581,44,446,44],[581,45,446,45],[581,47,446,47],[581,60,446,60],[582,10,447,12],[582,14,447,16],[583,12,448,16],[583,16,448,22,"data"],[583,20,448,26],[583,23,448,29],[583,29,448,35],[583,30,448,36],[583,31,448,37],[583,33,448,39,"fetch_1"],[583,40,448,46],[583,41,448,47,"remove"],[583,47,448,53],[583,49,448,55],[583,53,448,59],[583,54,448,60,"fetch"],[583,59,448,65],[583,61,448,67],[583,64,448,70],[583,68,448,74],[583,69,448,75,"url"],[583,72,448,78],[583,83,448,89],[583,87,448,93],[583,88,448,94,"bucketId"],[583,96,448,102],[583,98,448,104],[583,100,448,106],[584,14,448,108,"prefixes"],[584,22,448,116],[584,24,448,118,"paths"],[585,12,448,124],[585,13,448,125],[585,15,448,127],[586,14,448,129,"headers"],[586,21,448,136],[586,23,448,138],[586,27,448,142],[586,28,448,143,"headers"],[587,12,448,151],[587,13,448,152],[587,14,448,153],[588,12,449,16],[588,19,449,23],[589,14,449,25,"data"],[589,18,449,29],[590,14,449,31,"error"],[590,19,449,36],[590,21,449,38],[591,12,449,43],[591,13,449,44],[592,10,450,12],[592,11,450,13],[592,12,451,12],[592,19,451,19,"error"],[592,24,451,24],[592,26,451,26],[593,12,452,16],[593,16,452,20],[593,20,452,24],[593,21,452,25,"shouldThrowOnError"],[593,39,452,43],[593,41,452,45],[594,14,453,20],[594,20,453,26,"error"],[594,25,453,31],[595,12,454,16],[596,12,455,16],[596,16,455,20],[596,17,455,21],[596,18,455,22],[596,20,455,24,"errors_1"],[596,28,455,32],[596,29,455,33,"isStorageError"],[596,43,455,47],[596,45,455,49,"error"],[596,50,455,54],[596,51,455,55],[596,53,455,57],[597,14,456,20],[597,21,456,27],[598,16,456,29,"data"],[598,20,456,33],[598,22,456,35],[598,26,456,39],[599,16,456,41,"error"],[600,14,456,47],[600,15,456,48],[601,12,457,16],[602,12,458,16],[602,18,458,22,"error"],[602,23,458,27],[603,10,459,12],[604,8,460,8],[604,9,460,9],[604,10,460,10],[605,6,461,4],[606,6,462,4],[607,0,463,0],[608,0,464,0],[609,0,465,0],[610,6,466,4],[611,6,467,4],[612,6,468,4],[613,6,469,4],[614,6,470,4],[615,6,471,4],[616,6,472,4],[617,6,473,4],[618,6,474,4],[619,6,475,4],[620,6,476,4],[621,6,477,4],[622,6,478,4],[623,6,479,4],[624,6,480,4],[625,6,481,4],[626,6,482,4],[627,6,483,4],[628,6,484,4],[629,6,485,4],[630,6,486,4],[631,6,487,4],[632,6,488,4],[633,0,489,0],[634,0,490,0],[635,0,491,0],[636,0,492,0],[637,6,493,4],[638,6,494,4],[639,6,495,4],[640,6,496,4],[641,6,497,4],[642,6,498,4],[643,6,499,4],[644,6,500,4],[645,6,501,4],[646,6,502,4],[647,6,503,4],[648,6,504,4],[649,6,505,4],[650,6,506,4],[651,6,507,4],[652,6,508,4],[653,6,509,4],[654,6,510,4],[655,6,511,4],[656,6,512,4],[657,6,513,4],[658,6,514,4],[659,6,515,4],[660,6,516,4],[661,6,517,4],[662,6,518,4],[663,6,519,4],[664,6,520,4],[665,6,521,4],[666,0,522,0],[667,0,523,0],[668,0,524,0],[669,0,525,0],[670,4,521,4],[671,6,521,4,"key"],[671,9,521,4],[672,6,521,4,"value"],[672,11,521,4],[672,13,526,4],[672,22,526,4,"list"],[672,26,526,8,"list"],[672,27,526,9,"path"],[672,31,526,13],[672,33,526,15,"options"],[672,40,526,22],[672,42,526,24,"parameters"],[672,52,526,34],[672,54,526,36],[673,8,527,8],[673,15,527,15,"__awaiter"],[673,24,527,24],[673,25,527,25],[673,29,527,29],[673,31,527,31],[673,36,527,36],[673,37,527,37],[673,39,527,39],[673,44,527,44],[673,45,527,45],[673,47,527,47],[673,60,527,60],[674,10,528,12],[674,14,528,16],[675,12,529,16],[675,16,529,22,"body"],[675,20,529,26],[675,23,529,29,"Object"],[675,29,529,35],[675,30,529,36,"assign"],[675,36,529,42],[675,37,529,43,"Object"],[675,43,529,49],[675,44,529,50,"assign"],[675,50,529,56],[675,51,529,57,"Object"],[675,57,529,63],[675,58,529,64,"assign"],[675,64,529,70],[675,65,529,71],[675,66,529,72],[675,67,529,73],[675,69,529,75,"DEFAULT_SEARCH_OPTIONS"],[675,91,529,97],[675,92,529,98],[675,94,529,100,"options"],[675,101,529,107],[675,102,529,108],[675,104,529,110],[676,14,529,112,"prefix"],[676,20,529,118],[676,22,529,120,"path"],[676,26,529,124],[676,30,529,128],[677,12,529,131],[677,13,529,132],[677,14,529,133],[678,12,530,16],[678,16,530,22,"data"],[678,20,530,26],[678,23,530,29],[678,29,530,35],[678,30,530,36],[678,31,530,37],[678,33,530,39,"fetch_1"],[678,40,530,46],[678,41,530,47,"post"],[678,45,530,51],[678,47,530,53],[678,51,530,57],[678,52,530,58,"fetch"],[678,57,530,63],[678,59,530,65],[678,62,530,68],[678,66,530,72],[678,67,530,73,"url"],[678,70,530,76],[678,86,530,92],[678,90,530,96],[678,91,530,97,"bucketId"],[678,99,530,105],[678,101,530,107],[678,103,530,109,"body"],[678,107,530,113],[678,109,530,115],[679,14,530,117,"headers"],[679,21,530,124],[679,23,530,126],[679,27,530,130],[679,28,530,131,"headers"],[680,12,530,139],[680,13,530,140],[680,15,530,142,"parameters"],[680,25,530,152],[680,26,530,153],[681,12,531,16],[681,19,531,23],[682,14,531,25,"data"],[682,18,531,29],[683,14,531,31,"error"],[683,19,531,36],[683,21,531,38],[684,12,531,43],[684,13,531,44],[685,10,532,12],[685,11,532,13],[685,12,533,12],[685,19,533,19,"error"],[685,24,533,24],[685,26,533,26],[686,12,534,16],[686,16,534,20],[686,20,534,24],[686,21,534,25,"shouldThrowOnError"],[686,39,534,43],[686,41,534,45],[687,14,535,20],[687,20,535,26,"error"],[687,25,535,31],[688,12,536,16],[689,12,537,16],[689,16,537,20],[689,17,537,21],[689,18,537,22],[689,20,537,24,"errors_1"],[689,28,537,32],[689,29,537,33,"isStorageError"],[689,43,537,47],[689,45,537,49,"error"],[689,50,537,54],[689,51,537,55],[689,53,537,57],[690,14,538,20],[690,21,538,27],[691,16,538,29,"data"],[691,20,538,33],[691,22,538,35],[691,26,538,39],[692,16,538,41,"error"],[693,14,538,47],[693,15,538,48],[694,12,539,16],[695,12,540,16],[695,18,540,22,"error"],[695,23,540,27],[696,10,541,12],[697,8,542,8],[697,9,542,9],[697,10,542,10],[698,6,543,4],[699,6,544,4],[700,0,545,0],[701,0,546,0],[702,0,547,0],[703,0,548,0],[704,4,544,4],[705,6,544,4,"key"],[705,9,544,4],[706,6,544,4,"value"],[706,11,544,4],[706,13,549,4],[706,22,549,4,"listV2"],[706,28,549,10,"listV2"],[706,29,549,11,"options"],[706,36,549,18],[706,38,549,20,"parameters"],[706,48,549,30],[706,50,549,32],[707,8,550,8],[707,15,550,15,"__awaiter"],[707,24,550,24],[707,25,550,25],[707,29,550,29],[707,31,550,31],[707,36,550,36],[707,37,550,37],[707,39,550,39],[707,44,550,44],[707,45,550,45],[707,47,550,47],[707,60,550,60],[708,10,551,12],[708,14,551,16],[709,12,552,16],[709,16,552,22,"body"],[709,20,552,26],[709,23,552,29,"Object"],[709,29,552,35],[709,30,552,36,"assign"],[709,36,552,42],[709,37,552,43],[709,38,552,44],[709,39,552,45],[709,41,552,47,"options"],[709,48,552,54],[709,49,552,55],[710,12,553,16],[710,16,553,22,"data"],[710,20,553,26],[710,23,553,29],[710,29,553,35],[710,30,553,36],[710,31,553,37],[710,33,553,39,"fetch_1"],[710,40,553,46],[710,41,553,47,"post"],[710,45,553,51],[710,47,553,53],[710,51,553,57],[710,52,553,58,"fetch"],[710,57,553,63],[710,59,553,65],[710,62,553,68],[710,66,553,72],[710,67,553,73,"url"],[710,70,553,76],[710,89,553,95],[710,93,553,99],[710,94,553,100,"bucketId"],[710,102,553,108],[710,104,553,110],[710,106,553,112,"body"],[710,110,553,116],[710,112,553,118],[711,14,553,120,"headers"],[711,21,553,127],[711,23,553,129],[711,27,553,133],[711,28,553,134,"headers"],[712,12,553,142],[712,13,553,143],[712,15,553,145,"parameters"],[712,25,553,155],[712,26,553,156],[713,12,554,16],[713,19,554,23],[714,14,554,25,"data"],[714,18,554,29],[715,14,554,31,"error"],[715,19,554,36],[715,21,554,38],[716,12,554,43],[716,13,554,44],[717,10,555,12],[717,11,555,13],[717,12,556,12],[717,19,556,19,"error"],[717,24,556,24],[717,26,556,26],[718,12,557,16],[718,16,557,20],[718,20,557,24],[718,21,557,25,"shouldThrowOnError"],[718,39,557,43],[718,41,557,45],[719,14,558,20],[719,20,558,26,"error"],[719,25,558,31],[720,12,559,16],[721,12,560,16],[721,16,560,20],[721,17,560,21],[721,18,560,22],[721,20,560,24,"errors_1"],[721,28,560,32],[721,29,560,33,"isStorageError"],[721,43,560,47],[721,45,560,49,"error"],[721,50,560,54],[721,51,560,55],[721,53,560,57],[722,14,561,20],[722,21,561,27],[723,16,561,29,"data"],[723,20,561,33],[723,22,561,35],[723,26,561,39],[724,16,561,41,"error"],[725,14,561,47],[725,15,561,48],[726,12,562,16],[727,12,563,16],[727,18,563,22,"error"],[727,23,563,27],[728,10,564,12],[729,8,565,8],[729,9,565,9],[729,10,565,10],[730,6,566,4],[731,4,566,5],[732,6,566,5,"key"],[732,9,566,5],[733,6,566,5,"value"],[733,11,566,5],[733,13,567,4],[733,22,567,4,"encodeMetadata"],[733,36,567,18,"encodeMetadata"],[733,37,567,19,"metadata"],[733,45,567,27],[733,47,567,29],[734,8,568,8],[734,15,568,15,"JSON"],[734,19,568,19],[734,20,568,20,"stringify"],[734,29,568,29],[734,30,568,30,"metadata"],[734,38,568,38],[734,39,568,39],[735,6,569,4],[736,4,569,5],[737,6,569,5,"key"],[737,9,569,5],[738,6,569,5,"value"],[738,11,569,5],[738,13,570,4],[738,22,570,4,"toBase64"],[738,30,570,12,"toBase64"],[738,31,570,13,"data"],[738,35,570,17],[738,37,570,19],[739,8,571,8],[739,12,571,12],[739,19,571,19,"Buffer"],[739,25,571,25],[739,30,571,30],[739,41,571,41],[739,43,571,43],[740,10,572,12],[740,17,572,19,"Buffer"],[740,23,572,25],[740,24,572,26,"from"],[740,28,572,30],[740,29,572,31,"data"],[740,33,572,35],[740,34,572,36],[740,35,572,37,"toString"],[740,43,572,45],[740,44,572,46],[740,52,572,54],[740,53,572,55],[741,8,573,8],[742,8,574,8],[742,15,574,15,"btoa"],[742,19,574,19],[742,20,574,20,"data"],[742,24,574,24],[742,25,574,25],[743,6,575,4],[744,4,575,5],[745,6,575,5,"key"],[745,9,575,5],[746,6,575,5,"value"],[746,11,575,5],[746,13,576,4],[746,22,576,4,"_getFinalPath"],[746,35,576,17,"_getFinalPath"],[746,36,576,18,"path"],[746,40,576,22],[746,42,576,24],[747,8,577,8],[747,15,577,15],[747,18,577,18],[747,22,577,22],[747,23,577,23,"bucketId"],[747,31,577,31],[747,35,577,35,"path"],[747,39,577,39],[747,40,577,40,"replace"],[747,47,577,47],[747,48,577,48],[747,54,577,54],[747,56,577,56],[747,58,577,58],[747,59,577,59],[747,61,577,61],[748,6,578,4],[749,4,578,5],[750,6,578,5,"key"],[750,9,578,5],[751,6,578,5,"value"],[751,11,578,5],[751,13,579,4],[751,22,579,4,"_removeEmptyFolders"],[751,41,579,23,"_removeEmptyFolders"],[751,42,579,24,"path"],[751,46,579,28],[751,48,579,30],[752,8,580,8],[752,15,580,15,"path"],[752,19,580,19],[752,20,580,20,"replace"],[752,27,580,27],[752,28,580,28],[752,38,580,38],[752,40,580,40],[752,42,580,42],[752,43,580,43],[752,44,580,44,"replace"],[752,51,580,51],[752,52,580,52],[752,58,580,58],[752,60,580,60],[752,63,580,63],[752,64,580,64],[753,6,581,4],[754,4,581,5],[755,6,581,5,"key"],[755,9,581,5],[756,6,581,5,"value"],[756,11,581,5],[756,13,582,4],[756,22,582,4,"transformOptsToQueryString"],[756,48,582,30,"transformOptsToQueryString"],[756,49,582,31,"transform"],[756,58,582,40],[756,60,582,42],[757,8,583,8],[757,12,583,14,"params"],[757,18,583,20],[757,21,583,23],[757,23,583,25],[758,8,584,8],[758,12,584,12,"transform"],[758,21,584,21],[758,22,584,22,"width"],[758,27,584,27],[758,29,584,29],[759,10,585,12,"params"],[759,16,585,18],[759,17,585,19,"push"],[759,21,585,23],[759,22,585,24],[759,31,585,33,"transform"],[759,40,585,42],[759,41,585,43,"width"],[759,46,585,48],[759,48,585,50],[759,49,585,51],[760,8,586,8],[761,8,587,8],[761,12,587,12,"transform"],[761,21,587,21],[761,22,587,22,"height"],[761,28,587,28],[761,30,587,30],[762,10,588,12,"params"],[762,16,588,18],[762,17,588,19,"push"],[762,21,588,23],[762,22,588,24],[762,32,588,34,"transform"],[762,41,588,43],[762,42,588,44,"height"],[762,48,588,50],[762,50,588,52],[762,51,588,53],[763,8,589,8],[764,8,590,8],[764,12,590,12,"transform"],[764,21,590,21],[764,22,590,22,"resize"],[764,28,590,28],[764,30,590,30],[765,10,591,12,"params"],[765,16,591,18],[765,17,591,19,"push"],[765,21,591,23],[765,22,591,24],[765,32,591,34,"transform"],[765,41,591,43],[765,42,591,44,"resize"],[765,48,591,50],[765,50,591,52],[765,51,591,53],[766,8,592,8],[767,8,593,8],[767,12,593,12,"transform"],[767,21,593,21],[767,22,593,22,"format"],[767,28,593,28],[767,30,593,30],[768,10,594,12,"params"],[768,16,594,18],[768,17,594,19,"push"],[768,21,594,23],[768,22,594,24],[768,32,594,34,"transform"],[768,41,594,43],[768,42,594,44,"format"],[768,48,594,50],[768,50,594,52],[768,51,594,53],[769,8,595,8],[770,8,596,8],[770,12,596,12,"transform"],[770,21,596,21],[770,22,596,22,"quality"],[770,29,596,29],[770,31,596,31],[771,10,597,12,"params"],[771,16,597,18],[771,17,597,19,"push"],[771,21,597,23],[771,22,597,24],[771,33,597,35,"transform"],[771,42,597,44],[771,43,597,45,"quality"],[771,50,597,52],[771,52,597,54],[771,53,597,55],[772,8,598,8],[773,8,599,8],[773,15,599,15,"params"],[773,21,599,21],[773,22,599,22,"join"],[773,26,599,26],[773,27,599,27],[773,30,599,30],[773,31,599,31],[774,6,600,4],[775,4,600,5],[776,2,600,5],[777,2,602,0,"exports"],[777,9,602,7],[777,10,602,8,"default"],[777,17,602,15],[777,20,602,18,"StorageFileApi"],[777,34,602,32],[778,0,602,33],[778,3]],"functionMap":{"names":["<global>","<anonymous>","adopt","P$argument_0","fulfilled","rejected","step","StorageFileApi","constructor","throwOnError","uploadOrUpdate","__awaiter$argument_3","upload","uploadToSignedUrl","createSignedUploadUrl","update","move","copy","createSignedUrl","createSignedUrls","data.map$argument_0","download","info","exists","getPublicUrl","remove","list","listV2","encodeMetadata","toBase64","_getFinalPath","_removeEmptyFolders","transformOptsToQueryString"],"mappings":"AAA;4CCC;ICC,kEC,sCD,ID;QGE,2FH;QIC,8FJ;QKC,8GL;CDG;AOkB;ICC;KDM;IEI;KFG;IGQ;+CCC;SDiD;KHC;IKO;+CDC;SCE;KLC;IMO;+CFC;SEsC;KNC;IOQ;+CHC;SGwB;KPC;IQO;+CJC;SIE;KRC;ISQ;+CLC;SKmB;KTC;IUQ;+CNC;SMmB;KVC;IWS;+CPC;SOoB;KXC;IYQ;+CRC;mCSO;sCTE;SQa;KZC;IcO;+CVC;SUuB;KdC;IeK;+CXC;SWiB;KfC;IgBK;+CZC;SYoB;KhBC;IiBS;KjBsB;IkBM;+CdC;Scc;KlBC;ImBiE;+CfC;See;KnBC;IoBM;+ChBC;SgBe;KpBC;IqBC;KrBE;IsBC;KtBK;IuBC;KvBE;IwBC;KxBE;IyBC;KzBkB;CPC"},"hasCjsExports":true},"type":"js/module"}]}