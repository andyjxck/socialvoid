{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":25},"end":{"line":2,"column":44,"index":69}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"../utils/supabase","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":70},"end":{"line":3,"column":45,"index":115}}],"key":"KgrKTv0Nj7G4AeAd80Y1cXS5SgE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _s = $RefreshSig$(); // src/hooks/useGames.js\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.useGameStats = useGameStats;\n  Object.defineProperty(exports, \"GAME_STATS_TYPES\", {\n    enumerable: true,\n    get: function () {\n      return GAME_STATS_TYPES;\n    }\n  });\n  exports.formatGameScore = formatGameScore;\n  exports.formatPlaytime = formatPlaytime;\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _babelRuntimeHelpersSlicedToArray = require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\");\n  var _slicedToArray = _interopDefault(_babelRuntimeHelpersSlicedToArray);\n  var _react = require(_dependencyMap[2], \"react\");\n  var _utilsSupabase = require(_dependencyMap[3], \"../utils/supabase\");\n  /**\n   * useGameStats\n   * Load persistent per-player stats for a single game.\n   *\n   * @param {number} playerId  players.id\n   * @param {number} gameId    games.id  (numeric ID, not the string game_type)\n   * @returns {object} { stats, isLoading, error, refresh }\n   */\n  function useGameStats(playerId, gameId) {\n    _s();\n    var _useState = (0, _react.useState)(null),\n      _useState2 = (0, _slicedToArray.default)(_useState, 2),\n      stats = _useState2[0],\n      setStats = _useState2[1];\n    var _useState3 = (0, _react.useState)(true),\n      _useState4 = (0, _slicedToArray.default)(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n    var _useState5 = (0, _react.useState)(null),\n      _useState6 = (0, _slicedToArray.default)(_useState5, 2),\n      error = _useState6[0],\n      setError = _useState6[1];\n    var loadStats = /*#__PURE__*/function () {\n      var _ref = (0, _asyncToGenerator.default)(function* () {\n        if (!playerId || !gameId) {\n          setIsLoading(false);\n          return;\n        }\n        try {\n          setIsLoading(true);\n          setError(null);\n          console.log(`📊 Loading stats: player ${playerId}, game ${gameId}`);\n\n          // player_game_stats holds high_score / total_plays / etc.\n          var _yield$supabase$from$ = yield _utilsSupabase.supabase.from(\"player_game_stats\").select(\"high_score, total_plays, total_points_earned, best_time, total_playtime_seconds, player_id, game_id\").eq(\"player_id\", playerId).eq(\"game_id\", gameId).maybeSingle(),\n            data = _yield$supabase$from$.data,\n            fetchErr = _yield$supabase$from$.error; // avoid “0 rows” error\n\n          if (fetchErr) throw fetchErr;\n          setStats(data || {\n            high_score: 0,\n            total_plays: 0,\n            total_points_earned: 0,\n            best_time: null,\n            total_playtime_seconds: 0\n          });\n        } catch (err) {\n          console.error(\"❌ Failed to load player stats:\", err);\n          setError(err.message);\n          setStats({\n            high_score: 0,\n            total_plays: 0,\n            total_points_earned: 0,\n            best_time: null,\n            total_playtime_seconds: 0\n          });\n        } finally {\n          setIsLoading(false);\n        }\n      });\n      return function loadStats() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    (0, _react.useEffect)(() => {\n      loadStats();\n    }, [playerId, gameId]);\n    return {\n      stats,\n      isLoading,\n      error,\n      refresh: loadStats\n    };\n  }\n\n  /** Game-type string constants for convenience (use to look up games.id elsewhere) */\n  _s(useGameStats, \"XMaEOc3r/9NJafhx0F0tFeJ3IQE=\");\n  var GAME_STATS_TYPES = {\n    CONNECT_4: \"connect_4\",\n    TETRIS: \"tetris\",\n    TWENTY_FORTY_EIGHT: \"2048\",\n    MEMORY_MATCH: \"memory_match\",\n    SNAKE: \"snake\",\n    MINESWEEPER: \"minesweeper\",\n    WORD_SEARCH: \"word_search\",\n    SUDOKU: \"sudoku\",\n    SLIDING_PUZZLE: \"sliding_puzzle\",\n    CHESS: \"chess\",\n    SOLITAIRE: \"solitaire\",\n    BLOCK_BLAST: \"block_blast\",\n    WATER_SORT: \"water_sort\",\n    MANCALA: \"mancala\",\n    FLOW_CONNECT: \"flow_connect\",\n    SIMON_SAYS: \"simon_says\",\n    WHACK_A_TAP: \"whack_a_tap\",\n    DOTS_AND_BOXES: \"dots_and_boxes\",\n    KAKURO: \"kakuro\",\n    WORD_WHEEL: \"word_wheel\"\n  };\n\n  /**\n   * Format score display depending on the game type.\n   * @param {object} stats  object from useGameStats\n   * @param {string} gameType one of GAME_STATS_TYPES\n   */\n  function formatGameScore(stats, gameType) {\n    if (!stats) return {\n      display: \"--\",\n      label: \"Score\"\n    };\n    switch (gameType) {\n      // Games where “wins / total plays” is more meaningful\n      case GAME_STATS_TYPES.CONNECT_4:\n      case GAME_STATS_TYPES.CHESS:\n      case GAME_STATS_TYPES.MANCALA:\n      case GAME_STATS_TYPES.DOTS_AND_BOXES:\n        return {\n          display: `${stats.high_score || 0}/${stats.total_plays || 0}`,\n          label: \"Wins\",\n          wins: stats.high_score || 0,\n          losses: Math.max(0, (stats.total_plays || 0) - (stats.high_score || 0))\n        };\n\n      // Games with a best-time metric\n      case GAME_STATS_TYPES.WORD_SEARCH:\n      case GAME_STATS_TYPES.SUDOKU:\n      case GAME_STATS_TYPES.SLIDING_PUZZLE:\n      case GAME_STATS_TYPES.MINESWEEPER:\n      case GAME_STATS_TYPES.MEMORY_MATCH:\n      case GAME_STATS_TYPES.SOLITAIRE:\n        {\n          var t = stats.best_time;\n          if (!t) return {\n            display: \"--\",\n            label: \"Best Time\"\n          };\n          var m = Math.floor(t / 60);\n          var s = t % 60;\n          return {\n            display: m > 0 ? `${m}:${s.toString().padStart(2, \"0\")}` : `${s}s`,\n            label: \"Best Time\",\n            timeSeconds: t\n          };\n        }\n\n      // Level-based games\n      case GAME_STATS_TYPES.FLOW_CONNECT:\n      case GAME_STATS_TYPES.WATER_SORT:\n        return {\n          display: `Level ${stats.high_score || 0}`,\n          label: \"Best Level\",\n          level: stats.high_score || 0\n        };\n\n      // Word-count scoring\n      case GAME_STATS_TYPES.WORD_WHEEL:\n        return {\n          display: `${stats.high_score || 0} words`,\n          label: \"Best Score\",\n          words: stats.high_score || 0\n        };\n\n      // Default: standard numeric high score\n      default:\n        return {\n          display: (stats.high_score || 0).toLocaleString(),\n          label: \"High Score\",\n          score: stats.high_score || 0\n        };\n    }\n  }\n\n  /**\n   * Human-readable playtime from total_playtime_seconds.\n   */\n  function formatPlaytime(stats) {\n    var sec = stats?.total_playtime_seconds || 0;\n    if (sec <= 0) return \"Not played yet\";\n    var h = Math.floor(sec / 3600);\n    var m = Math.floor(sec % 3600 / 60);\n    if (h > 0) return `${h}h ${m}m played`;\n    if (m > 0) return `${m}m played`;\n    return \"Less than 1m played\";\n  }\n});","lineCount":212,"map":[[4,27,1,0],[5,2,1,0,"Object"],[5,8,1,0],[5,9,1,0,"defineProperty"],[5,23,1,0],[5,24,1,0,"exports"],[5,31,1,0],[6,4,1,0,"value"],[6,9,1,0],[7,2,1,0],[8,2,1,0],[8,11,1,0,"_interopDefault"],[8,27,1,0,"e"],[8,28,1,0],[9,4,1,0],[9,11,1,0,"e"],[9,12,1,0],[9,16,1,0,"e"],[9,17,1,0],[9,18,1,0,"__esModule"],[9,28,1,0],[9,31,1,0,"e"],[9,32,1,0],[10,6,1,0,"default"],[10,13,1,0],[10,15,1,0,"e"],[11,4,1,0],[12,2,1,0],[13,2,13,0,"exports"],[13,9,13,0],[13,10,13,0,"useGameStats"],[13,22,13,0],[13,25,13,0,"useGameStats"],[13,37,13,0],[14,2,74,0,"Object"],[14,8,74,0],[14,9,74,0,"defineProperty"],[14,23,74,0],[14,24,74,0,"exports"],[14,31,74,0],[15,4,74,0,"enumerable"],[15,14,74,0],[16,4,74,0,"get"],[16,7,74,0],[16,18,74,0,"get"],[16,19,74,0],[17,6,74,0],[17,13,74,0,"GAME_STATS_TYPES"],[17,29,74,0],[18,4,74,0],[19,2,74,0],[20,2,102,0,"exports"],[20,9,102,0],[20,10,102,0,"formatGameScore"],[20,25,102,0],[20,28,102,0,"formatGameScore"],[20,43,102,0],[21,2,169,0,"exports"],[21,9,169,0],[21,10,169,0,"formatPlaytime"],[21,24,169,0],[21,27,169,0,"formatPlaytime"],[21,41,169,0],[22,2,179,1],[22,6,179,1,"_babelRuntimeHelpersAsyncToGenerator"],[22,42,179,1],[22,45,179,1,"require"],[22,52,179,1],[22,53,179,1,"_dependencyMap"],[22,67,179,1],[23,2,179,1],[23,6,179,1,"_asyncToGenerator"],[23,23,179,1],[23,26,179,1,"_interopDefault"],[23,41,179,1],[23,42,179,1,"_babelRuntimeHelpersAsyncToGenerator"],[23,78,179,1],[24,2,179,1],[24,6,179,1,"_babelRuntimeHelpersSlicedToArray"],[24,39,179,1],[24,42,179,1,"require"],[24,49,179,1],[24,50,179,1,"_dependencyMap"],[24,64,179,1],[25,2,179,1],[25,6,179,1,"_slicedToArray"],[25,20,179,1],[25,23,179,1,"_interopDefault"],[25,38,179,1],[25,39,179,1,"_babelRuntimeHelpersSlicedToArray"],[25,72,179,1],[26,2,2,0],[26,6,2,0,"_react"],[26,12,2,0],[26,15,2,0,"require"],[26,22,2,0],[26,23,2,0,"_dependencyMap"],[26,37,2,0],[27,2,3,0],[27,6,3,0,"_utilsSupabase"],[27,20,3,0],[27,23,3,0,"require"],[27,30,3,0],[27,31,3,0,"_dependencyMap"],[27,45,3,0],[28,2,5,0],[29,0,6,0],[30,0,7,0],[31,0,8,0],[32,0,9,0],[33,0,10,0],[34,0,11,0],[35,0,12,0],[36,2,13,7],[36,11,13,16,"useGameStats"],[36,23,13,28,"useGameStats"],[36,24,13,29,"playerId"],[36,32,13,37],[36,34,13,39,"gameId"],[36,40,13,45],[36,42,13,47],[37,4,13,47,"_s"],[37,6,13,47],[38,4,14,2],[38,8,14,2,"_useState"],[38,17,14,2],[38,20,14,28],[38,24,14,28,"useState"],[38,30,14,36],[38,31,14,36,"useState"],[38,39,14,36],[38,41,14,37],[38,45,14,41],[38,46,14,42],[39,6,14,42,"_useState2"],[39,16,14,42],[39,23,14,42,"_slicedToArray"],[39,37,14,42],[39,38,14,42,"default"],[39,45,14,42],[39,47,14,42,"_useState"],[39,56,14,42],[40,6,14,9,"stats"],[40,11,14,14],[40,14,14,14,"_useState2"],[40,24,14,14],[41,6,14,16,"setStats"],[41,14,14,24],[41,17,14,24,"_useState2"],[41,27,14,24],[42,4,15,2],[42,8,15,2,"_useState3"],[42,18,15,2],[42,21,15,36],[42,25,15,36,"useState"],[42,31,15,44],[42,32,15,44,"useState"],[42,40,15,44],[42,42,15,45],[42,46,15,49],[42,47,15,50],[43,6,15,50,"_useState4"],[43,16,15,50],[43,23,15,50,"_slicedToArray"],[43,37,15,50],[43,38,15,50,"default"],[43,45,15,50],[43,47,15,50,"_useState3"],[43,57,15,50],[44,6,15,9,"isLoading"],[44,15,15,18],[44,18,15,18,"_useState4"],[44,28,15,18],[45,6,15,20,"setIsLoading"],[45,18,15,32],[45,21,15,32,"_useState4"],[45,31,15,32],[46,4,16,2],[46,8,16,2,"_useState5"],[46,18,16,2],[46,21,16,28],[46,25,16,28,"useState"],[46,31,16,36],[46,32,16,36,"useState"],[46,40,16,36],[46,42,16,37],[46,46,16,41],[46,47,16,42],[47,6,16,42,"_useState6"],[47,16,16,42],[47,23,16,42,"_slicedToArray"],[47,37,16,42],[47,38,16,42,"default"],[47,45,16,42],[47,47,16,42,"_useState5"],[47,57,16,42],[48,6,16,9,"error"],[48,11,16,14],[48,14,16,14,"_useState6"],[48,24,16,14],[49,6,16,16,"setError"],[49,14,16,24],[49,17,16,24,"_useState6"],[49,27,16,24],[50,4,18,2],[50,8,18,8,"loadStats"],[50,17,18,17],[51,6,18,17],[51,10,18,17,"_ref"],[51,14,18,17],[51,21,18,17,"_asyncToGenerator"],[51,38,18,17],[51,39,18,17,"default"],[51,46,18,17],[51,48,18,20],[51,61,18,32],[52,8,19,4],[52,12,19,8],[52,13,19,9,"playerId"],[52,21,19,17],[52,25,19,21],[52,26,19,22,"gameId"],[52,32,19,28],[52,34,19,30],[53,10,20,6,"setIsLoading"],[53,22,20,18],[53,23,20,19],[53,28,20,24],[53,29,20,25],[54,10,21,6],[55,8,22,4],[56,8,24,4],[56,12,24,8],[57,10,25,6,"setIsLoading"],[57,22,25,18],[57,23,25,19],[57,27,25,23],[57,28,25,24],[58,10,26,6,"setError"],[58,18,26,14],[58,19,26,15],[58,23,26,19],[58,24,26,20],[59,10,28,6,"console"],[59,17,28,13],[59,18,28,14,"log"],[59,21,28,17],[59,22,28,18],[59,50,28,46,"playerId"],[59,58,28,54],[59,68,28,64,"gameId"],[59,74,28,70],[59,76,28,72],[59,77,28,73],[61,10,30,6],[62,10,31,6],[62,14,31,6,"_yield$supabase$from$"],[62,35,31,6],[62,44,31,46,"supabase"],[62,58,31,54],[62,59,31,54,"supabase"],[62,67,31,54],[62,68,32,9,"from"],[62,72,32,13],[62,73,32,14],[62,92,32,33],[62,93,32,34],[62,94,33,9,"select"],[62,100,33,15],[62,101,34,10],[62,202,35,8],[62,203,35,9],[62,204,36,9,"eq"],[62,206,36,11],[62,207,36,12],[62,218,36,23],[62,220,36,25,"playerId"],[62,228,36,33],[62,229,36,34],[62,230,37,9,"eq"],[62,232,37,11],[62,233,37,12],[62,242,37,21],[62,244,37,23,"gameId"],[62,250,37,29],[62,251,37,30],[62,252,38,9,"maybeSingle"],[62,263,38,20],[62,264,38,21],[62,265,38,22],[63,12,31,14,"data"],[63,16,31,18],[63,19,31,18,"_yield$supabase$from$"],[63,40,31,18],[63,41,31,14,"data"],[63,45,31,18],[64,12,31,27,"fetchErr"],[64,20,31,35],[64,23,31,35,"_yield$supabase$from$"],[64,44,31,35],[64,45,31,20,"error"],[64,50,31,25],[64,51,38,23],[64,52,38,24],[66,10,40,6],[66,14,40,10,"fetchErr"],[66,22,40,18],[66,24,40,20],[66,30,40,26,"fetchErr"],[66,38,40,34],[67,10,42,6,"setStats"],[67,18,42,14],[67,19,43,8,"data"],[67,23,43,12],[67,27,43,16],[68,12,44,10,"high_score"],[68,22,44,20],[68,24,44,22],[68,25,44,23],[69,12,45,10,"total_plays"],[69,23,45,21],[69,25,45,23],[69,26,45,24],[70,12,46,10,"total_points_earned"],[70,31,46,29],[70,33,46,31],[70,34,46,32],[71,12,47,10,"best_time"],[71,21,47,19],[71,23,47,21],[71,27,47,25],[72,12,48,10,"total_playtime_seconds"],[72,34,48,32],[72,36,48,34],[73,10,49,8],[73,11,50,6],[73,12,50,7],[74,8,51,4],[74,9,51,5],[74,10,51,6],[74,17,51,13,"err"],[74,20,51,16],[74,22,51,18],[75,10,52,6,"console"],[75,17,52,13],[75,18,52,14,"error"],[75,23,52,19],[75,24,52,20],[75,56,52,52],[75,58,52,54,"err"],[75,61,52,57],[75,62,52,58],[76,10,53,6,"setError"],[76,18,53,14],[76,19,53,15,"err"],[76,22,53,18],[76,23,53,19,"message"],[76,30,53,26],[76,31,53,27],[77,10,54,6,"setStats"],[77,18,54,14],[77,19,54,15],[78,12,55,8,"high_score"],[78,22,55,18],[78,24,55,20],[78,25,55,21],[79,12,56,8,"total_plays"],[79,23,56,19],[79,25,56,21],[79,26,56,22],[80,12,57,8,"total_points_earned"],[80,31,57,27],[80,33,57,29],[80,34,57,30],[81,12,58,8,"best_time"],[81,21,58,17],[81,23,58,19],[81,27,58,23],[82,12,59,8,"total_playtime_seconds"],[82,34,59,30],[82,36,59,32],[83,10,60,6],[83,11,60,7],[83,12,60,8],[84,8,61,4],[84,9,61,5],[84,18,61,14],[85,10,62,6,"setIsLoading"],[85,22,62,18],[85,23,62,19],[85,28,62,24],[85,29,62,25],[86,8,63,4],[87,6,64,2],[87,7,64,3],[88,6,64,3],[88,22,18,8,"loadStats"],[88,31,18,17,"loadStats"],[88,32,18,17],[89,8,18,17],[89,15,18,17,"_ref"],[89,19,18,17],[89,20,18,17,"apply"],[89,25,18,17],[89,32,18,17,"arguments"],[89,41,18,17],[90,6,18,17],[91,4,18,17],[91,7,64,3],[92,4,66,2],[92,8,66,2,"useEffect"],[92,14,66,11],[92,15,66,11,"useEffect"],[92,24,66,11],[92,26,66,12],[92,32,66,18],[93,6,67,4,"loadStats"],[93,15,67,13],[93,16,67,14],[93,17,67,15],[94,4,68,2],[94,5,68,3],[94,7,68,5],[94,8,68,6,"playerId"],[94,16,68,14],[94,18,68,16,"gameId"],[94,24,68,22],[94,25,68,23],[94,26,68,24],[95,4,70,2],[95,11,70,9],[96,6,70,11,"stats"],[96,11,70,16],[97,6,70,18,"isLoading"],[97,15,70,27],[98,6,70,29,"error"],[98,11,70,34],[99,6,70,36,"refresh"],[99,13,70,43],[99,15,70,45,"loadStats"],[100,4,70,55],[100,5,70,56],[101,2,71,0],[103,2,73,0],[104,2,73,0,"_s"],[104,4,73,0],[104,5,13,16,"useGameStats"],[104,17,13,28],[105,2,74,7],[105,6,74,13,"GAME_STATS_TYPES"],[105,22,74,29],[105,25,74,32],[106,4,75,2,"CONNECT_4"],[106,13,75,11],[106,15,75,13],[106,26,75,24],[107,4,76,2,"TETRIS"],[107,10,76,8],[107,12,76,10],[107,20,76,18],[108,4,77,2,"TWENTY_FORTY_EIGHT"],[108,22,77,20],[108,24,77,22],[108,30,77,28],[109,4,78,2,"MEMORY_MATCH"],[109,16,78,14],[109,18,78,16],[109,32,78,30],[110,4,79,2,"SNAKE"],[110,9,79,7],[110,11,79,9],[110,18,79,16],[111,4,80,2,"MINESWEEPER"],[111,15,80,13],[111,17,80,15],[111,30,80,28],[112,4,81,2,"WORD_SEARCH"],[112,15,81,13],[112,17,81,15],[112,30,81,28],[113,4,82,2,"SUDOKU"],[113,10,82,8],[113,12,82,10],[113,20,82,18],[114,4,83,2,"SLIDING_PUZZLE"],[114,18,83,16],[114,20,83,18],[114,36,83,34],[115,4,84,2,"CHESS"],[115,9,84,7],[115,11,84,9],[115,18,84,16],[116,4,85,2,"SOLITAIRE"],[116,13,85,11],[116,15,85,13],[116,26,85,24],[117,4,86,2,"BLOCK_BLAST"],[117,15,86,13],[117,17,86,15],[117,30,86,28],[118,4,87,2,"WATER_SORT"],[118,14,87,12],[118,16,87,14],[118,28,87,26],[119,4,88,2,"MANCALA"],[119,11,88,9],[119,13,88,11],[119,22,88,20],[120,4,89,2,"FLOW_CONNECT"],[120,16,89,14],[120,18,89,16],[120,32,89,30],[121,4,90,2,"SIMON_SAYS"],[121,14,90,12],[121,16,90,14],[121,28,90,26],[122,4,91,2,"WHACK_A_TAP"],[122,15,91,13],[122,17,91,15],[122,30,91,28],[123,4,92,2,"DOTS_AND_BOXES"],[123,18,92,16],[123,20,92,18],[123,36,92,34],[124,4,93,2,"KAKURO"],[124,10,93,8],[124,12,93,10],[124,20,93,18],[125,4,94,2,"WORD_WHEEL"],[125,14,94,12],[125,16,94,14],[126,2,95,0],[126,3,95,1],[128,2,97,0],[129,0,98,0],[130,0,99,0],[131,0,100,0],[132,0,101,0],[133,2,102,7],[133,11,102,16,"formatGameScore"],[133,26,102,31,"formatGameScore"],[133,27,102,32,"stats"],[133,32,102,37],[133,34,102,39,"gameType"],[133,42,102,47],[133,44,102,49],[134,4,103,2],[134,8,103,6],[134,9,103,7,"stats"],[134,14,103,12],[134,16,103,14],[134,23,103,21],[135,6,103,23,"display"],[135,13,103,30],[135,15,103,32],[135,19,103,36],[136,6,103,38,"label"],[136,11,103,43],[136,13,103,45],[137,4,103,53],[137,5,103,54],[138,4,105,2],[138,12,105,10,"gameType"],[138,20,105,18],[139,6,106,4],[140,6,107,4],[140,11,107,9,"GAME_STATS_TYPES"],[140,27,107,25],[140,28,107,26,"CONNECT_4"],[140,37,107,35],[141,6,108,4],[141,11,108,9,"GAME_STATS_TYPES"],[141,27,108,25],[141,28,108,26,"CHESS"],[141,33,108,31],[142,6,109,4],[142,11,109,9,"GAME_STATS_TYPES"],[142,27,109,25],[142,28,109,26,"MANCALA"],[142,35,109,33],[143,6,110,4],[143,11,110,9,"GAME_STATS_TYPES"],[143,27,110,25],[143,28,110,26,"DOTS_AND_BOXES"],[143,42,110,40],[144,8,111,6],[144,15,111,13],[145,10,112,8,"display"],[145,17,112,15],[145,19,112,17],[145,22,112,20,"stats"],[145,27,112,25],[145,28,112,26,"high_score"],[145,38,112,36],[145,42,112,40],[145,43,112,41],[145,47,112,45,"stats"],[145,52,112,50],[145,53,112,51,"total_plays"],[145,64,112,62],[145,68,112,66],[145,69,112,67],[145,71,112,69],[146,10,113,8,"label"],[146,15,113,13],[146,17,113,15],[146,23,113,21],[147,10,114,8,"wins"],[147,14,114,12],[147,16,114,14,"stats"],[147,21,114,19],[147,22,114,20,"high_score"],[147,32,114,30],[147,36,114,34],[147,37,114,35],[148,10,115,8,"losses"],[148,16,115,14],[148,18,115,16,"Math"],[148,22,115,20],[148,23,115,21,"max"],[148,26,115,24],[148,27,116,10],[148,28,116,11],[148,30,117,10],[148,31,117,11,"stats"],[148,36,117,16],[148,37,117,17,"total_plays"],[148,48,117,28],[148,52,117,32],[148,53,117,33],[148,58,117,38,"stats"],[148,63,117,43],[148,64,117,44,"high_score"],[148,74,117,54],[148,78,117,58],[148,79,117,59],[148,80,118,8],[149,8,119,6],[149,9,119,7],[151,6,121,4],[152,6,122,4],[152,11,122,9,"GAME_STATS_TYPES"],[152,27,122,25],[152,28,122,26,"WORD_SEARCH"],[152,39,122,37],[153,6,123,4],[153,11,123,9,"GAME_STATS_TYPES"],[153,27,123,25],[153,28,123,26,"SUDOKU"],[153,34,123,32],[154,6,124,4],[154,11,124,9,"GAME_STATS_TYPES"],[154,27,124,25],[154,28,124,26,"SLIDING_PUZZLE"],[154,42,124,40],[155,6,125,4],[155,11,125,9,"GAME_STATS_TYPES"],[155,27,125,25],[155,28,125,26,"MINESWEEPER"],[155,39,125,37],[156,6,126,4],[156,11,126,9,"GAME_STATS_TYPES"],[156,27,126,25],[156,28,126,26,"MEMORY_MATCH"],[156,40,126,38],[157,6,127,4],[157,11,127,9,"GAME_STATS_TYPES"],[157,27,127,25],[157,28,127,26,"SOLITAIRE"],[157,37,127,35],[158,8,127,37],[159,10,128,6],[159,14,128,12,"t"],[159,15,128,13],[159,18,128,16,"stats"],[159,23,128,21],[159,24,128,22,"best_time"],[159,33,128,31],[160,10,129,6],[160,14,129,10],[160,15,129,11,"t"],[160,16,129,12],[160,18,129,14],[160,25,129,21],[161,12,129,23,"display"],[161,19,129,30],[161,21,129,32],[161,25,129,36],[162,12,129,38,"label"],[162,17,129,43],[162,19,129,45],[163,10,129,57],[163,11,129,58],[164,10,130,6],[164,14,130,12,"m"],[164,15,130,13],[164,18,130,16,"Math"],[164,22,130,20],[164,23,130,21,"floor"],[164,28,130,26],[164,29,130,27,"t"],[164,30,130,28],[164,33,130,31],[164,35,130,33],[164,36,130,34],[165,10,131,6],[165,14,131,12,"s"],[165,15,131,13],[165,18,131,16,"t"],[165,19,131,17],[165,22,131,20],[165,24,131,22],[166,10,132,6],[166,17,132,13],[167,12,133,8,"display"],[167,19,133,15],[167,21,133,17,"m"],[167,22,133,18],[167,25,133,21],[167,26,133,22],[167,29,133,25],[167,32,133,28,"m"],[167,33,133,29],[167,37,133,33,"s"],[167,38,133,34],[167,39,133,35,"toString"],[167,47,133,43],[167,48,133,44],[167,49,133,45],[167,50,133,46,"padStart"],[167,58,133,54],[167,59,133,55],[167,60,133,56],[167,62,133,58],[167,65,133,61],[167,66,133,62],[167,68,133,64],[167,71,133,67],[167,74,133,70,"s"],[167,75,133,71],[167,78,133,74],[168,12,134,8,"label"],[168,17,134,13],[168,19,134,15],[168,30,134,26],[169,12,135,8,"timeSeconds"],[169,23,135,19],[169,25,135,21,"t"],[170,10,136,6],[170,11,136,7],[171,8,137,4],[173,6,139,4],[174,6,140,4],[174,11,140,9,"GAME_STATS_TYPES"],[174,27,140,25],[174,28,140,26,"FLOW_CONNECT"],[174,40,140,38],[175,6,141,4],[175,11,141,9,"GAME_STATS_TYPES"],[175,27,141,25],[175,28,141,26,"WATER_SORT"],[175,38,141,36],[176,8,142,6],[176,15,142,13],[177,10,143,8,"display"],[177,17,143,15],[177,19,143,17],[177,28,143,26,"stats"],[177,33,143,31],[177,34,143,32,"high_score"],[177,44,143,42],[177,48,143,46],[177,49,143,47],[177,51,143,49],[178,10,144,8,"label"],[178,15,144,13],[178,17,144,15],[178,29,144,27],[179,10,145,8,"level"],[179,15,145,13],[179,17,145,15,"stats"],[179,22,145,20],[179,23,145,21,"high_score"],[179,33,145,31],[179,37,145,35],[180,8,146,6],[180,9,146,7],[182,6,148,4],[183,6,149,4],[183,11,149,9,"GAME_STATS_TYPES"],[183,27,149,25],[183,28,149,26,"WORD_WHEEL"],[183,38,149,36],[184,8,150,6],[184,15,150,13],[185,10,151,8,"display"],[185,17,151,15],[185,19,151,17],[185,22,151,20,"stats"],[185,27,151,25],[185,28,151,26,"high_score"],[185,38,151,36],[185,42,151,40],[185,43,151,41],[185,51,151,49],[186,10,152,8,"label"],[186,15,152,13],[186,17,152,15],[186,29,152,27],[187,10,153,8,"words"],[187,15,153,13],[187,17,153,15,"stats"],[187,22,153,20],[187,23,153,21,"high_score"],[187,33,153,31],[187,37,153,35],[188,8,154,6],[188,9,154,7],[190,6,156,4],[191,6,157,4],[192,8,158,6],[192,15,158,13],[193,10,159,8,"display"],[193,17,159,15],[193,19,159,17],[193,20,159,18,"stats"],[193,25,159,23],[193,26,159,24,"high_score"],[193,36,159,34],[193,40,159,38],[193,41,159,39],[193,43,159,41,"toLocaleString"],[193,57,159,55],[193,58,159,56],[193,59,159,57],[194,10,160,8,"label"],[194,15,160,13],[194,17,160,15],[194,29,160,27],[195,10,161,8,"score"],[195,15,161,13],[195,17,161,15,"stats"],[195,22,161,20],[195,23,161,21,"high_score"],[195,33,161,31],[195,37,161,35],[196,8,162,6],[196,9,162,7],[197,4,163,2],[198,2,164,0],[200,2,166,0],[201,0,167,0],[202,0,168,0],[203,2,169,7],[203,11,169,16,"formatPlaytime"],[203,25,169,30,"formatPlaytime"],[203,26,169,31,"stats"],[203,31,169,36],[203,33,169,38],[204,4,170,2],[204,8,170,8,"sec"],[204,11,170,11],[204,14,170,14,"stats"],[204,19,170,19],[204,21,170,21,"total_playtime_seconds"],[204,43,170,43],[204,47,170,47],[204,48,170,48],[205,4,171,2],[205,8,171,6,"sec"],[205,11,171,9],[205,15,171,13],[205,16,171,14],[205,18,171,16],[205,25,171,23],[205,41,171,39],[206,4,173,2],[206,8,173,8,"h"],[206,9,173,9],[206,12,173,12,"Math"],[206,16,173,16],[206,17,173,17,"floor"],[206,22,173,22],[206,23,173,23,"sec"],[206,26,173,26],[206,29,173,29],[206,33,173,33],[206,34,173,34],[207,4,174,2],[207,8,174,8,"m"],[207,9,174,9],[207,12,174,12,"Math"],[207,16,174,16],[207,17,174,17,"floor"],[207,22,174,22],[207,23,174,24,"sec"],[207,26,174,27],[207,29,174,30],[207,33,174,34],[207,36,174,38],[207,38,174,40],[207,39,174,41],[208,4,176,2],[208,8,176,6,"h"],[208,9,176,7],[208,12,176,10],[208,13,176,11],[208,15,176,13],[208,22,176,20],[208,25,176,23,"h"],[208,26,176,24],[208,31,176,29,"m"],[208,32,176,30],[208,42,176,40],[209,4,177,2],[209,8,177,6,"m"],[209,9,177,7],[209,12,177,10],[209,13,177,11],[209,15,177,13],[209,22,177,20],[209,25,177,23,"m"],[209,26,177,24],[209,36,177,34],[210,4,178,2],[210,11,178,9],[210,32,178,30],[211,2,179,0],[212,0,179,1],[212,3]],"functionMap":{"names":["<global>","useGameStats","loadStats","useEffect$argument_0","formatGameScore","formatPlaytime"],"mappings":"AAA;OCY;oBCK;GD8C;YEE;GFE;CDG;OI+B;CJ8D;OKK;CLU"},"hasCjsExports":false},"type":"js/module"}]}