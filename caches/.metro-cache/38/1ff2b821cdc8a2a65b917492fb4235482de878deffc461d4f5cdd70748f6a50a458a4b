{"dependencies":[{"name":"./constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":64,"index":64}}],"key":"waDaw5D7vDr2hRFu0z1BqRCTzP4=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"createEmptyBoard\", {\n    enumerable: true,\n    get: function () {\n      return createEmptyBoard;\n    }\n  });\n  Object.defineProperty(exports, \"getRandomPieceType\", {\n    enumerable: true,\n    get: function () {\n      return getRandomPieceType;\n    }\n  });\n  Object.defineProperty(exports, \"createPiece\", {\n    enumerable: true,\n    get: function () {\n      return createPiece;\n    }\n  });\n  Object.defineProperty(exports, \"isValidPosition\", {\n    enumerable: true,\n    get: function () {\n      return isValidPosition;\n    }\n  });\n  Object.defineProperty(exports, \"lockPiece\", {\n    enumerable: true,\n    get: function () {\n      return lockPiece;\n    }\n  });\n  Object.defineProperty(exports, \"clearLines\", {\n    enumerable: true,\n    get: function () {\n      return clearLines;\n    }\n  });\n  Object.defineProperty(exports, \"calculateScore\", {\n    enumerable: true,\n    get: function () {\n      return calculateScore;\n    }\n  });\n  var _constants = require(_dependencyMap[0], \"./constants\");\n  // Initialize empty board\n  var createEmptyBoard = () => {\n    return Array(_constants.BOARD_HEIGHT).fill(null).map(() => Array(_constants.BOARD_WIDTH).fill({\n      filled: false,\n      color: null\n    }));\n  };\n\n  // Get random piece type\n  var getRandomPieceType = () => {\n    var types = Object.keys(_constants.PIECES);\n    return types[Math.floor(Math.random() * types.length)];\n  };\n\n  // Create new piece\n  var createPiece = type => {\n    return {\n      type,\n      rotation: 0,\n      shape: _constants.PIECES[type].shape[0],\n      color: _constants.PIECES[type].color\n    };\n  };\n\n  // Check if position is valid\n  var isValidPosition = function (board, piece, pos) {\n    var rotation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    var shape = _constants.PIECES[piece.type].shape[rotation];\n    for (var row = 0; row < 4; row++) {\n      for (var col = 0; col < 4; col++) {\n        if (shape[row][col]) {\n          var newRow = pos.y + row;\n          var newCol = pos.x + col;\n\n          // Check boundaries\n          if (newCol < 0 || newCol >= _constants.BOARD_WIDTH || newRow >= _constants.BOARD_HEIGHT) {\n            return false;\n          }\n\n          // Check collision with existing pieces (but allow negative rows for spawning)\n          if (newRow >= 0 && board[newRow][newCol].filled) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  };\n\n  // Lock piece to board\n  var lockPiece = (board, piece, pos, rotation) => {\n    var newBoard = board.map(row => row.map(cell => ({\n      ...cell\n    })));\n    var shape = _constants.PIECES[piece.type].shape[rotation];\n    for (var row = 0; row < 4; row++) {\n      for (var col = 0; col < 4; col++) {\n        if (shape[row][col]) {\n          var boardRow = pos.y + row;\n          var boardCol = pos.x + col;\n          if (boardRow >= 0) {\n            newBoard[boardRow][boardCol] = {\n              filled: true,\n              color: piece.color\n            };\n          }\n        }\n      }\n    }\n    return newBoard;\n  };\n\n  // Clear completed lines\n  var clearLines = board => {\n    var newBoard = [];\n    var clearedCount = 0;\n    for (var row = 0; row < _constants.BOARD_HEIGHT; row++) {\n      if (board[row].every(cell => cell.filled)) {\n        clearedCount++;\n      } else {\n        newBoard.push([...board[row]]);\n      }\n    }\n\n    // Add empty rows at top\n    while (newBoard.length < _constants.BOARD_HEIGHT) {\n      newBoard.unshift(Array(_constants.BOARD_WIDTH).fill({\n        filled: false,\n        color: null\n      }));\n    }\n    return {\n      board: newBoard,\n      linesCleared: clearedCount\n    };\n  };\n\n  // Calculate score\n  var calculateScore = (linesCleared, currentLevel) => {\n    var basePoints = [0, 40, 100, 300, 1200];\n    return basePoints[linesCleared] * (currentLevel + 1);\n  };\n});","lineCount":152,"map":[[7,2,4,0,"Object"],[7,8,4,0],[7,9,4,0,"defineProperty"],[7,23,4,0],[7,24,4,0,"exports"],[7,31,4,0],[8,4,4,0,"enumerable"],[8,14,4,0],[9,4,4,0,"get"],[9,7,4,0],[9,18,4,0,"get"],[9,19,4,0],[10,6,4,0],[10,13,4,0,"createEmptyBoard"],[10,29,4,0],[11,4,4,0],[12,2,4,0],[13,2,11,0,"Object"],[13,8,11,0],[13,9,11,0,"defineProperty"],[13,23,11,0],[13,24,11,0,"exports"],[13,31,11,0],[14,4,11,0,"enumerable"],[14,14,11,0],[15,4,11,0,"get"],[15,7,11,0],[15,18,11,0,"get"],[15,19,11,0],[16,6,11,0],[16,13,11,0,"getRandomPieceType"],[16,31,11,0],[17,4,11,0],[18,2,11,0],[19,2,17,0,"Object"],[19,8,17,0],[19,9,17,0,"defineProperty"],[19,23,17,0],[19,24,17,0,"exports"],[19,31,17,0],[20,4,17,0,"enumerable"],[20,14,17,0],[21,4,17,0,"get"],[21,7,17,0],[21,18,17,0,"get"],[21,19,17,0],[22,6,17,0],[22,13,17,0,"createPiece"],[22,24,17,0],[23,4,17,0],[24,2,17,0],[25,2,27,0,"Object"],[25,8,27,0],[25,9,27,0,"defineProperty"],[25,23,27,0],[25,24,27,0,"exports"],[25,31,27,0],[26,4,27,0,"enumerable"],[26,14,27,0],[27,4,27,0,"get"],[27,7,27,0],[27,18,27,0,"get"],[27,19,27,0],[28,6,27,0],[28,13,27,0,"isValidPosition"],[28,28,27,0],[29,4,27,0],[30,2,27,0],[31,2,52,0,"Object"],[31,8,52,0],[31,9,52,0,"defineProperty"],[31,23,52,0],[31,24,52,0,"exports"],[31,31,52,0],[32,4,52,0,"enumerable"],[32,14,52,0],[33,4,52,0,"get"],[33,7,52,0],[33,18,52,0,"get"],[33,19,52,0],[34,6,52,0],[34,13,52,0,"lockPiece"],[34,22,52,0],[35,4,52,0],[36,2,52,0],[37,2,76,0,"Object"],[37,8,76,0],[37,9,76,0,"defineProperty"],[37,23,76,0],[37,24,76,0,"exports"],[37,31,76,0],[38,4,76,0,"enumerable"],[38,14,76,0],[39,4,76,0,"get"],[39,7,76,0],[39,18,76,0,"get"],[39,19,76,0],[40,6,76,0],[40,13,76,0,"clearLines"],[40,23,76,0],[41,4,76,0],[42,2,76,0],[43,2,97,0,"Object"],[43,8,97,0],[43,9,97,0,"defineProperty"],[43,23,97,0],[43,24,97,0,"exports"],[43,31,97,0],[44,4,97,0,"enumerable"],[44,14,97,0],[45,4,97,0,"get"],[45,7,97,0],[45,18,97,0,"get"],[45,19,97,0],[46,6,97,0],[46,13,97,0,"calculateScore"],[46,27,97,0],[47,4,97,0],[48,2,97,0],[49,2,1,0],[49,6,1,0,"_constants"],[49,16,1,0],[49,19,1,0,"require"],[49,26,1,0],[49,27,1,0,"_dependencyMap"],[49,41,1,0],[50,2,3,0],[51,2,4,7],[51,6,4,13,"createEmptyBoard"],[51,22,4,29],[51,25,4,32,"createEmptyBoard"],[51,26,4,32],[51,31,4,38],[52,4,5,2],[52,11,5,9,"Array"],[52,16,5,14],[52,17,5,15,"BOARD_HEIGHT"],[52,27,5,27],[52,28,5,27,"BOARD_HEIGHT"],[52,40,5,27],[52,41,5,28],[52,42,6,5,"fill"],[52,46,6,9],[52,47,6,10],[52,51,6,14],[52,52,6,15],[52,53,7,5,"map"],[52,56,7,8],[52,57,7,9],[52,63,7,15,"Array"],[52,68,7,20],[52,69,7,21,"BOARD_WIDTH"],[52,79,7,32],[52,80,7,32,"BOARD_WIDTH"],[52,91,7,32],[52,92,7,33],[52,93,7,34,"fill"],[52,97,7,38],[52,98,7,39],[53,6,7,41,"filled"],[53,12,7,47],[53,14,7,49],[53,19,7,54],[54,6,7,56,"color"],[54,11,7,61],[54,13,7,63],[55,4,7,68],[55,5,7,69],[55,6,7,70],[55,7,7,71],[56,2,8,0],[56,3,8,1],[58,2,10,0],[59,2,11,7],[59,6,11,13,"getRandomPieceType"],[59,24,11,31],[59,27,11,34,"getRandomPieceType"],[59,28,11,34],[59,33,11,40],[60,4,12,2],[60,8,12,8,"types"],[60,13,12,13],[60,16,12,16,"Object"],[60,22,12,22],[60,23,12,23,"keys"],[60,27,12,27],[60,28,12,28,"PIECES"],[60,38,12,34],[60,39,12,34,"PIECES"],[60,45,12,34],[60,46,12,35],[61,4,13,2],[61,11,13,9,"types"],[61,16,13,14],[61,17,13,15,"Math"],[61,21,13,19],[61,22,13,20,"floor"],[61,27,13,25],[61,28,13,26,"Math"],[61,32,13,30],[61,33,13,31,"random"],[61,39,13,37],[61,40,13,38],[61,41,13,39],[61,44,13,42,"types"],[61,49,13,47],[61,50,13,48,"length"],[61,56,13,54],[61,57,13,55],[61,58,13,56],[62,2,14,0],[62,3,14,1],[64,2,16,0],[65,2,17,7],[65,6,17,13,"createPiece"],[65,17,17,24],[65,20,17,28,"type"],[65,24,17,32],[65,28,17,37],[66,4,18,2],[66,11,18,9],[67,6,19,4,"type"],[67,10,19,8],[68,6,20,4,"rotation"],[68,14,20,12],[68,16,20,14],[68,17,20,15],[69,6,21,4,"shape"],[69,11,21,9],[69,13,21,11,"PIECES"],[69,23,21,17],[69,24,21,17,"PIECES"],[69,30,21,17],[69,31,21,18,"type"],[69,35,21,22],[69,36,21,23],[69,37,21,24,"shape"],[69,42,21,29],[69,43,21,30],[69,44,21,31],[69,45,21,32],[70,6,22,4,"color"],[70,11,22,9],[70,13,22,11,"PIECES"],[70,23,22,17],[70,24,22,17,"PIECES"],[70,30,22,17],[70,31,22,18,"type"],[70,35,22,22],[70,36,22,23],[70,37,22,24,"color"],[71,4,23,2],[71,5,23,3],[72,2,24,0],[72,3,24,1],[74,2,26,0],[75,2,27,7],[75,6,27,13,"isValidPosition"],[75,21,27,28],[75,24,27,31],[75,33,27,31,"isValidPosition"],[75,34,27,32,"board"],[75,39,27,37],[75,41,27,39,"piece"],[75,46,27,44],[75,48,27,46,"pos"],[75,51,27,49],[75,53,27,68],[76,4,27,68],[76,8,27,51,"rotation"],[76,16,27,59],[76,19,27,59,"arguments"],[76,28,27,59],[76,29,27,59,"length"],[76,35,27,59],[76,43,27,59,"arguments"],[76,52,27,59],[76,60,27,59,"undefined"],[76,69,27,59],[76,72,27,59,"arguments"],[76,81,27,59],[76,87,27,62],[76,88,27,63],[77,4,28,2],[77,8,28,8,"shape"],[77,13,28,13],[77,16,28,16,"PIECES"],[77,26,28,22],[77,27,28,22,"PIECES"],[77,33,28,22],[77,34,28,23,"piece"],[77,39,28,28],[77,40,28,29,"type"],[77,44,28,33],[77,45,28,34],[77,46,28,35,"shape"],[77,51,28,40],[77,52,28,41,"rotation"],[77,60,28,49],[77,61,28,50],[78,4,30,2],[78,9,30,7],[78,13,30,11,"row"],[78,16,30,14],[78,19,30,17],[78,20,30,18],[78,22,30,20,"row"],[78,25,30,23],[78,28,30,26],[78,29,30,27],[78,31,30,29,"row"],[78,34,30,32],[78,36,30,34],[78,38,30,36],[79,6,31,4],[79,11,31,9],[79,15,31,13,"col"],[79,18,31,16],[79,21,31,19],[79,22,31,20],[79,24,31,22,"col"],[79,27,31,25],[79,30,31,28],[79,31,31,29],[79,33,31,31,"col"],[79,36,31,34],[79,38,31,36],[79,40,31,38],[80,8,32,6],[80,12,32,10,"shape"],[80,17,32,15],[80,18,32,16,"row"],[80,21,32,19],[80,22,32,20],[80,23,32,21,"col"],[80,26,32,24],[80,27,32,25],[80,29,32,27],[81,10,33,8],[81,14,33,14,"newRow"],[81,20,33,20],[81,23,33,23,"pos"],[81,26,33,26],[81,27,33,27,"y"],[81,28,33,28],[81,31,33,31,"row"],[81,34,33,34],[82,10,34,8],[82,14,34,14,"newCol"],[82,20,34,20],[82,23,34,23,"pos"],[82,26,34,26],[82,27,34,27,"x"],[82,28,34,28],[82,31,34,31,"col"],[82,34,34,34],[84,10,36,8],[85,10,37,8],[85,14,37,12,"newCol"],[85,20,37,18],[85,23,37,21],[85,24,37,22],[85,28,37,26,"newCol"],[85,34,37,32],[85,38,37,36,"BOARD_WIDTH"],[85,48,37,47],[85,49,37,47,"BOARD_WIDTH"],[85,60,37,47],[85,64,37,51,"newRow"],[85,70,37,57],[85,74,37,61,"BOARD_HEIGHT"],[85,84,37,73],[85,85,37,73,"BOARD_HEIGHT"],[85,97,37,73],[85,99,37,75],[86,12,38,10],[86,19,38,17],[86,24,38,22],[87,10,39,8],[89,10,41,8],[90,10,42,8],[90,14,42,12,"newRow"],[90,20,42,18],[90,24,42,22],[90,25,42,23],[90,29,42,27,"board"],[90,34,42,32],[90,35,42,33,"newRow"],[90,41,42,39],[90,42,42,40],[90,43,42,41,"newCol"],[90,49,42,47],[90,50,42,48],[90,51,42,49,"filled"],[90,57,42,55],[90,59,42,57],[91,12,43,10],[91,19,43,17],[91,24,43,22],[92,10,44,8],[93,8,45,6],[94,6,46,4],[95,4,47,2],[96,4,48,2],[96,11,48,9],[96,15,48,13],[97,2,49,0],[97,3,49,1],[99,2,51,0],[100,2,52,7],[100,6,52,13,"lockPiece"],[100,15,52,22],[100,18,52,25,"lockPiece"],[100,19,52,26,"board"],[100,24,52,31],[100,26,52,33,"piece"],[100,31,52,38],[100,33,52,40,"pos"],[100,36,52,43],[100,38,52,45,"rotation"],[100,46,52,53],[100,51,52,58],[101,4,53,2],[101,8,53,8,"newBoard"],[101,16,53,16],[101,19,53,19,"board"],[101,24,53,24],[101,25,53,25,"map"],[101,28,53,28],[101,29,53,30,"row"],[101,32,53,33],[101,36,53,38,"row"],[101,39,53,41],[101,40,53,42,"map"],[101,43,53,45],[101,44,53,47,"cell"],[101,48,53,51],[101,53,53,57],[102,6,53,59],[102,9,53,62,"cell"],[103,4,53,67],[103,5,53,68],[103,6,53,69],[103,7,53,70],[103,8,53,71],[104,4,54,2],[104,8,54,8,"shape"],[104,13,54,13],[104,16,54,16,"PIECES"],[104,26,54,22],[104,27,54,22,"PIECES"],[104,33,54,22],[104,34,54,23,"piece"],[104,39,54,28],[104,40,54,29,"type"],[104,44,54,33],[104,45,54,34],[104,46,54,35,"shape"],[104,51,54,40],[104,52,54,41,"rotation"],[104,60,54,49],[104,61,54,50],[105,4,56,2],[105,9,56,7],[105,13,56,11,"row"],[105,16,56,14],[105,19,56,17],[105,20,56,18],[105,22,56,20,"row"],[105,25,56,23],[105,28,56,26],[105,29,56,27],[105,31,56,29,"row"],[105,34,56,32],[105,36,56,34],[105,38,56,36],[106,6,57,4],[106,11,57,9],[106,15,57,13,"col"],[106,18,57,16],[106,21,57,19],[106,22,57,20],[106,24,57,22,"col"],[106,27,57,25],[106,30,57,28],[106,31,57,29],[106,33,57,31,"col"],[106,36,57,34],[106,38,57,36],[106,40,57,38],[107,8,58,6],[107,12,58,10,"shape"],[107,17,58,15],[107,18,58,16,"row"],[107,21,58,19],[107,22,58,20],[107,23,58,21,"col"],[107,26,58,24],[107,27,58,25],[107,29,58,27],[108,10,59,8],[108,14,59,14,"boardRow"],[108,22,59,22],[108,25,59,25,"pos"],[108,28,59,28],[108,29,59,29,"y"],[108,30,59,30],[108,33,59,33,"row"],[108,36,59,36],[109,10,60,8],[109,14,60,14,"boardCol"],[109,22,60,22],[109,25,60,25,"pos"],[109,28,60,28],[109,29,60,29,"x"],[109,30,60,30],[109,33,60,33,"col"],[109,36,60,36],[110,10,62,8],[110,14,62,12,"boardRow"],[110,22,62,20],[110,26,62,24],[110,27,62,25],[110,29,62,27],[111,12,63,10,"newBoard"],[111,20,63,18],[111,21,63,19,"boardRow"],[111,29,63,27],[111,30,63,28],[111,31,63,29,"boardCol"],[111,39,63,37],[111,40,63,38],[111,43,63,41],[112,14,64,12,"filled"],[112,20,64,18],[112,22,64,20],[112,26,64,24],[113,14,65,12,"color"],[113,19,65,17],[113,21,65,19,"piece"],[113,26,65,24],[113,27,65,25,"color"],[114,12,66,10],[114,13,66,11],[115,10,67,8],[116,8,68,6],[117,6,69,4],[118,4,70,2],[119,4,72,2],[119,11,72,9,"newBoard"],[119,19,72,17],[120,2,73,0],[120,3,73,1],[122,2,75,0],[123,2,76,7],[123,6,76,13,"clearLines"],[123,16,76,23],[123,19,76,27,"board"],[123,24,76,32],[123,28,76,37],[124,4,77,2],[124,8,77,8,"newBoard"],[124,16,77,16],[124,19,77,19],[124,21,77,21],[125,4,78,2],[125,8,78,6,"clearedCount"],[125,20,78,18],[125,23,78,21],[125,24,78,22],[126,4,80,2],[126,9,80,7],[126,13,80,11,"row"],[126,16,80,14],[126,19,80,17],[126,20,80,18],[126,22,80,20,"row"],[126,25,80,23],[126,28,80,26,"BOARD_HEIGHT"],[126,38,80,38],[126,39,80,38,"BOARD_HEIGHT"],[126,51,80,38],[126,53,80,40,"row"],[126,56,80,43],[126,58,80,45],[126,60,80,47],[127,6,81,4],[127,10,81,8,"board"],[127,15,81,13],[127,16,81,14,"row"],[127,19,81,17],[127,20,81,18],[127,21,81,19,"every"],[127,26,81,24],[127,27,81,26,"cell"],[127,31,81,30],[127,35,81,35,"cell"],[127,39,81,39],[127,40,81,40,"filled"],[127,46,81,46],[127,47,81,47],[127,49,81,49],[128,8,82,6,"clearedCount"],[128,20,82,18],[128,22,82,20],[129,6,83,4],[129,7,83,5],[129,13,83,11],[130,8,84,6,"newBoard"],[130,16,84,14],[130,17,84,15,"push"],[130,21,84,19],[130,22,84,20],[130,23,84,21],[130,26,84,24,"board"],[130,31,84,29],[130,32,84,30,"row"],[130,35,84,33],[130,36,84,34],[130,37,84,35],[130,38,84,36],[131,6,85,4],[132,4,86,2],[134,4,88,2],[135,4,89,2],[135,11,89,9,"newBoard"],[135,19,89,17],[135,20,89,18,"length"],[135,26,89,24],[135,29,89,27,"BOARD_HEIGHT"],[135,39,89,39],[135,40,89,39,"BOARD_HEIGHT"],[135,52,89,39],[135,54,89,41],[136,6,90,4,"newBoard"],[136,14,90,12],[136,15,90,13,"unshift"],[136,22,90,20],[136,23,90,21,"Array"],[136,28,90,26],[136,29,90,27,"BOARD_WIDTH"],[136,39,90,38],[136,40,90,38,"BOARD_WIDTH"],[136,51,90,38],[136,52,90,39],[136,53,90,40,"fill"],[136,57,90,44],[136,58,90,45],[137,8,90,47,"filled"],[137,14,90,53],[137,16,90,55],[137,21,90,60],[138,8,90,62,"color"],[138,13,90,67],[138,15,90,69],[139,6,90,74],[139,7,90,75],[139,8,90,76],[139,9,90,77],[140,4,91,2],[141,4,93,2],[141,11,93,9],[142,6,93,11,"board"],[142,11,93,16],[142,13,93,18,"newBoard"],[142,21,93,26],[143,6,93,28,"linesCleared"],[143,18,93,40],[143,20,93,42,"clearedCount"],[144,4,93,55],[144,5,93,56],[145,2,94,0],[145,3,94,1],[147,2,96,0],[148,2,97,7],[148,6,97,13,"calculateScore"],[148,20,97,27],[148,23,97,30,"calculateScore"],[148,24,97,31,"linesCleared"],[148,36,97,43],[148,38,97,45,"currentLevel"],[148,50,97,57],[148,55,97,62],[149,4,98,2],[149,8,98,8,"basePoints"],[149,18,98,18],[149,21,98,21],[149,22,98,22],[149,23,98,23],[149,25,98,25],[149,27,98,27],[149,29,98,29],[149,32,98,32],[149,34,98,34],[149,37,98,37],[149,39,98,39],[149,43,98,43],[149,44,98,44],[150,4,99,2],[150,11,99,9,"basePoints"],[150,21,99,19],[150,22,99,20,"linesCleared"],[150,34,99,32],[150,35,99,33],[150,39,99,37,"currentLevel"],[150,51,99,49],[150,54,99,52],[150,55,99,53],[150,56,99,54],[151,2,100,0],[151,3,100,1],[152,0,100,2],[152,3]],"functionMap":{"names":["<global>","createEmptyBoard","Array.fill.map$argument_0","getRandomPieceType","createPiece","isValidPosition","lockPiece","board.map$argument_0","row.map$argument_0","clearLines","board.row.every$argument_0","calculateScore"],"mappings":"AAA;gCCG;SCG,6DD;CDC;kCGG;CHG;2BIG;CJO;+BKG;CLsB;yBMG;6BCC,iBC,uBD,CD;CNoB;0BSG;yBCK,qBD;CTa;8BWG;CXG"},"hasCjsExports":false},"type":"js/module"}]}