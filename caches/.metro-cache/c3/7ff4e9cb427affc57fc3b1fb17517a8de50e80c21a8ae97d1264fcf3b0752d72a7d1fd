{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"./supabase","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":24},"end":{"line":2,"column":38,"index":62}}],"key":"nombsjMCzh8A1aWqTxUa62QcPc0=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  Object.defineProperty(exports, \"getGameId\", {\n    enumerable: true,\n    get: function () {\n      return getGameId;\n    }\n  });\n  Object.defineProperty(exports, \"GAME_TYPES\", {\n    enumerable: true,\n    get: function () {\n      return GAME_TYPES;\n    }\n  });\n  Object.defineProperty(exports, \"clearGameIdCache\", {\n    enumerable: true,\n    get: function () {\n      return clearGameIdCache;\n    }\n  });\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _supabase = require(_dependencyMap[1], \"./supabase\");\n  // src/utils/gameIds.js\n  // adjust path if needed\n\n  // Cache to avoid hitting Supabase repeatedly\n  var gameIdCache = {};\n\n  /**\n   * Aliases so different front-end keys still match the DB `games.game_type`\n   * You can add or remove items if you add more games later.\n   */\n  var TYPE_ALIASES = {\n    \"2048\": [\"2048\", \"twenty48\", \"twenty_forty_eight\"],\n    tetris: [\"tetris\"],\n    snake: [\"snake\"],\n    chess: [\"chess\"],\n    minesweeper: [\"minesweeper\", \"mine_sweeper\"],\n    sudoku: [\"sudoku\"],\n    memory_match: [\"memory_match\", \"memory-match\"],\n    word_search: [\"word_search\", \"word-search\"],\n    sliding_puzzle: [\"sliding_puzzle\", \"sliding-puzzle\"],\n    block_blast: [\"block_blast\", \"block-blast\"],\n    water_sort: [\"water_sort\", \"water-sort\"],\n    flow_connect: [\"flow_connect\", \"flow-connect\"],\n    mancala: [\"mancala\"],\n    solitaire: [\"solitaire\"],\n    connect_4: [\"connect_4\", \"connect4\"],\n    simon_says: [\"simon_says\", \"simon\"],\n    whack_a_tap: [\"whack_a_tap\", \"whack-a-tap\"],\n    dots_and_boxes: [\"dots_and_boxes\", \"dots_boxes\"],\n    kakuro: [\"kakuro\"],\n    word_wheel: [\"word_wheel\", \"word-wheel\"],\n    cross_word_wheel: [\"cross_word_wheel\", \"crossword_wheel\"],\n    scrabble: [\"scrabble\"],\n    crossword: [\"crossword\"]\n  };\n\n  /**\n   * Build all candidate strings we should try against `games.game_type`\n   */\n  function candidateTypes(gameType) {\n    if (!gameType) return [];\n    var key = String(gameType).toLowerCase();\n    var aliases = TYPE_ALIASES[key] || [];\n    // also try swapping underscores and hyphens just in case\n    var alt1 = key.replace(/_/g, \"-\");\n    var alt2 = key.replace(/-/g, \"_\");\n    return Array.from(new Set([key, alt1, alt2, ...aliases]));\n  }\n\n  /**\n   * Get the numeric id from the games table by its game_type\n   * @param {string} gameType - e.g. \"tetris\", \"connect_4\"\n   * @returns {Promise<number|null>} numeric id or null if not found\n   */\n  var getGameId = /*#__PURE__*/function () {\n    var _ref = (0, _asyncToGenerator.default)(function* (gameType) {\n      if (!gameType) return null;\n      if (gameIdCache[gameType]) {\n        return gameIdCache[gameType];\n      }\n      try {\n        var candidates = candidateTypes(gameType);\n        for (var type of candidates) {\n          var _yield$supabase$from$ = yield _supabase.supabase.from(\"games\").select(\"id, game_type\").eq(\"game_type\", type).maybeSingle(),\n            data = _yield$supabase$from$.data,\n            error = _yield$supabase$from$.error;\n          if (error) {\n            console.error(`❌ Supabase error while looking up \"${type}\":`, error);\n            continue;\n          }\n          if (data?.id) {\n            gameIdCache[gameType] = data.id;\n            console.log(`🎮 Game ID cached: ${gameType} (${type}) = ${data.id}`);\n            return data.id;\n          }\n        }\n        console.warn(`⚠️ No game found for type \"${gameType}\" (tried: ${candidates.join(\", \")})`);\n        return null;\n      } catch (err) {\n        console.error(`❌ Error getting game ID for ${gameType}:`, err);\n        return null;\n      }\n    });\n    return function getGameId(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  /**\n   * Game type constants for easy reference in your app\n   * These match the exact `game_type` values shown in your screenshots.\n   */\n  var GAME_TYPES = {\n    TWENTY48: \"2048\",\n    TETRIS: \"tetris\",\n    SNAKE: \"snake\",\n    CHESS: \"chess\",\n    MINESWEEPER: \"minesweeper\",\n    SUDOKU: \"sudoku\",\n    MEMORY_MATCH: \"memory_match\",\n    WORD_SEARCH: \"word_search\",\n    SLIDING_PUZZLE: \"sliding_puzzle\",\n    BLOCK_BLAST: \"block_blast\",\n    WATER_SORT: \"water_sort\",\n    FLOW_CONNECT: \"flow_connect\",\n    MANCALA: \"mancala\",\n    SOLITAIRE: \"solitaire\",\n    CONNECT_4: \"connect_4\",\n    SIMON_SAYS: \"simon_says\",\n    WHACK_A_TAP: \"whack_a_tap\",\n    DOTS_AND_BOXES: \"dots_and_boxes\",\n    KAKURO: \"kakuro\",\n    WORD_WHEEL: \"word_wheel\",\n    CROSS_WORD_WHEEL: \"cross_word_wheel\",\n    SCRABBLE: \"scrabble\",\n    CROSSWORD: \"crossword\"\n  };\n\n  /**\n   * Clear the ID cache (if games table changes while app is running)\n   */\n  var clearGameIdCache = () => {\n    Object.keys(gameIdCache).forEach(k => delete gameIdCache[k]);\n    console.log(\"🎮 Game ID cache cleared\");\n  };\n  var _default = {\n    getGameId,\n    GAME_TYPES,\n    clearGameIdCache\n  };\n});","lineCount":169,"map":[[12,2,130,0,"Object"],[12,8,130,0],[12,9,130,0,"defineProperty"],[12,23,130,0],[12,24,130,0,"exports"],[12,31,130,0],[13,4,130,0,"enumerable"],[13,14,130,0],[14,4,130,0,"get"],[14,7,130,0],[14,18,130,0,"get"],[14,19,130,0],[15,6,130,0],[15,13,130,0,"_default"],[15,21,130,0],[16,4,130,0],[17,2,130,0],[18,2,55,0,"Object"],[18,8,55,0],[18,9,55,0,"defineProperty"],[18,23,55,0],[18,24,55,0,"exports"],[18,31,55,0],[19,4,55,0,"enumerable"],[19,14,55,0],[20,4,55,0,"get"],[20,7,55,0],[20,18,55,0,"get"],[20,19,55,0],[21,6,55,0],[21,13,55,0,"getGameId"],[21,22,55,0],[22,4,55,0],[23,2,55,0],[24,2,96,0,"Object"],[24,8,96,0],[24,9,96,0,"defineProperty"],[24,23,96,0],[24,24,96,0,"exports"],[24,31,96,0],[25,4,96,0,"enumerable"],[25,14,96,0],[26,4,96,0,"get"],[26,7,96,0],[26,18,96,0,"get"],[26,19,96,0],[27,6,96,0],[27,13,96,0,"GAME_TYPES"],[27,23,96,0],[28,4,96,0],[29,2,96,0],[30,2,125,0,"Object"],[30,8,125,0],[30,9,125,0,"defineProperty"],[30,23,125,0],[30,24,125,0,"exports"],[30,31,125,0],[31,4,125,0,"enumerable"],[31,14,125,0],[32,4,125,0,"get"],[32,7,125,0],[32,18,125,0,"get"],[32,19,125,0],[33,6,125,0],[33,13,125,0,"clearGameIdCache"],[33,29,125,0],[34,4,125,0],[35,2,125,0],[36,2,128,2],[36,6,128,2,"_babelRuntimeHelpersAsyncToGenerator"],[36,42,128,2],[36,45,128,2,"require"],[36,52,128,2],[36,53,128,2,"_dependencyMap"],[36,67,128,2],[37,2,128,2],[37,6,128,2,"_asyncToGenerator"],[37,23,128,2],[37,26,128,2,"_interopDefault"],[37,41,128,2],[37,42,128,2,"_babelRuntimeHelpersAsyncToGenerator"],[37,78,128,2],[38,2,2,0],[38,6,2,0,"_supabase"],[38,15,2,0],[38,18,2,0,"require"],[38,25,2,0],[38,26,2,0,"_dependencyMap"],[38,40,2,0],[39,2,1,0],[40,2,2,39],[42,2,4,0],[43,2,5,0],[43,6,5,6,"gameIdCache"],[43,17,5,17],[43,20,5,20],[43,21,5,21],[43,22,5,22],[45,2,7,0],[46,0,8,0],[47,0,9,0],[48,0,10,0],[49,2,11,0],[49,6,11,6,"TYPE_ALIASES"],[49,18,11,18],[49,21,11,21],[50,4,12,2],[50,10,12,8],[50,12,12,10],[50,13,12,11],[50,19,12,17],[50,21,12,19],[50,31,12,29],[50,33,12,31],[50,53,12,51],[50,54,12,52],[51,4,13,2,"tetris"],[51,10,13,8],[51,12,13,10],[51,13,13,11],[51,21,13,19],[51,22,13,20],[52,4,14,2,"snake"],[52,9,14,7],[52,11,14,9],[52,12,14,10],[52,19,14,17],[52,20,14,18],[53,4,15,2,"chess"],[53,9,15,7],[53,11,15,9],[53,12,15,10],[53,19,15,17],[53,20,15,18],[54,4,16,2,"minesweeper"],[54,15,16,13],[54,17,16,15],[54,18,16,16],[54,31,16,29],[54,33,16,31],[54,47,16,45],[54,48,16,46],[55,4,17,2,"sudoku"],[55,10,17,8],[55,12,17,10],[55,13,17,11],[55,21,17,19],[55,22,17,20],[56,4,18,2,"memory_match"],[56,16,18,14],[56,18,18,16],[56,19,18,17],[56,33,18,31],[56,35,18,33],[56,49,18,47],[56,50,18,48],[57,4,19,2,"word_search"],[57,15,19,13],[57,17,19,15],[57,18,19,16],[57,31,19,29],[57,33,19,31],[57,46,19,44],[57,47,19,45],[58,4,20,2,"sliding_puzzle"],[58,18,20,16],[58,20,20,18],[58,21,20,19],[58,37,20,35],[58,39,20,37],[58,55,20,53],[58,56,20,54],[59,4,21,2,"block_blast"],[59,15,21,13],[59,17,21,15],[59,18,21,16],[59,31,21,29],[59,33,21,31],[59,46,21,44],[59,47,21,45],[60,4,22,2,"water_sort"],[60,14,22,12],[60,16,22,14],[60,17,22,15],[60,29,22,27],[60,31,22,29],[60,43,22,41],[60,44,22,42],[61,4,23,2,"flow_connect"],[61,16,23,14],[61,18,23,16],[61,19,23,17],[61,33,23,31],[61,35,23,33],[61,49,23,47],[61,50,23,48],[62,4,24,2,"mancala"],[62,11,24,9],[62,13,24,11],[62,14,24,12],[62,23,24,21],[62,24,24,22],[63,4,25,2,"solitaire"],[63,13,25,11],[63,15,25,13],[63,16,25,14],[63,27,25,25],[63,28,25,26],[64,4,26,2,"connect_4"],[64,13,26,11],[64,15,26,13],[64,16,26,14],[64,27,26,25],[64,29,26,27],[64,39,26,37],[64,40,26,38],[65,4,27,2,"simon_says"],[65,14,27,12],[65,16,27,14],[65,17,27,15],[65,29,27,27],[65,31,27,29],[65,38,27,36],[65,39,27,37],[66,4,28,2,"whack_a_tap"],[66,15,28,13],[66,17,28,15],[66,18,28,16],[66,31,28,29],[66,33,28,31],[66,46,28,44],[66,47,28,45],[67,4,29,2,"dots_and_boxes"],[67,18,29,16],[67,20,29,18],[67,21,29,19],[67,37,29,35],[67,39,29,37],[67,51,29,49],[67,52,29,50],[68,4,30,2,"kakuro"],[68,10,30,8],[68,12,30,10],[68,13,30,11],[68,21,30,19],[68,22,30,20],[69,4,31,2,"word_wheel"],[69,14,31,12],[69,16,31,14],[69,17,31,15],[69,29,31,27],[69,31,31,29],[69,43,31,41],[69,44,31,42],[70,4,32,2,"cross_word_wheel"],[70,20,32,18],[70,22,32,20],[70,23,32,21],[70,41,32,39],[70,43,32,41],[70,60,32,58],[70,61,32,59],[71,4,33,2,"scrabble"],[71,12,33,10],[71,14,33,12],[71,15,33,13],[71,25,33,23],[71,26,33,24],[72,4,34,2,"crossword"],[72,13,34,11],[72,15,34,13],[72,16,34,14],[72,27,34,25],[73,2,35,0],[73,3,35,1],[75,2,37,0],[76,0,38,0],[77,0,39,0],[78,2,40,0],[78,11,40,9,"candidateTypes"],[78,25,40,23,"candidateTypes"],[78,26,40,24,"gameType"],[78,34,40,32],[78,36,40,34],[79,4,41,2],[79,8,41,6],[79,9,41,7,"gameType"],[79,17,41,15],[79,19,41,17],[79,26,41,24],[79,28,41,26],[80,4,42,2],[80,8,42,8,"key"],[80,11,42,11],[80,14,42,14,"String"],[80,20,42,20],[80,21,42,21,"gameType"],[80,29,42,29],[80,30,42,30],[80,31,42,31,"toLowerCase"],[80,42,42,42],[80,43,42,43],[80,44,42,44],[81,4,43,2],[81,8,43,8,"aliases"],[81,15,43,15],[81,18,43,18,"TYPE_ALIASES"],[81,30,43,30],[81,31,43,31,"key"],[81,34,43,34],[81,35,43,35],[81,39,43,39],[81,41,43,41],[82,4,44,2],[83,4,45,2],[83,8,45,8,"alt1"],[83,12,45,12],[83,15,45,15,"key"],[83,18,45,18],[83,19,45,19,"replace"],[83,26,45,26],[83,27,45,27],[83,31,45,31],[83,33,45,33],[83,36,45,36],[83,37,45,37],[84,4,46,2],[84,8,46,8,"alt2"],[84,12,46,12],[84,15,46,15,"key"],[84,18,46,18],[84,19,46,19,"replace"],[84,26,46,26],[84,27,46,27],[84,31,46,31],[84,33,46,33],[84,36,46,36],[84,37,46,37],[85,4,47,2],[85,11,47,9,"Array"],[85,16,47,14],[85,17,47,15,"from"],[85,21,47,19],[85,22,47,20],[85,26,47,24,"Set"],[85,29,47,27],[85,30,47,28],[85,31,47,29,"key"],[85,34,47,32],[85,36,47,34,"alt1"],[85,40,47,38],[85,42,47,40,"alt2"],[85,46,47,44],[85,48,47,46],[85,51,47,49,"aliases"],[85,58,47,56],[85,59,47,57],[85,60,47,58],[85,61,47,59],[86,2,48,0],[88,2,50,0],[89,0,51,0],[90,0,52,0],[91,0,53,0],[92,0,54,0],[93,2,55,7],[93,6,55,13,"getGameId"],[93,15,55,22],[94,4,55,22],[94,8,55,22,"_ref"],[94,12,55,22],[94,19,55,22,"_asyncToGenerator"],[94,36,55,22],[94,37,55,22,"default"],[94,44,55,22],[94,46,55,25],[94,57,55,32,"gameType"],[94,65,55,40],[94,67,55,45],[95,6,56,2],[95,10,56,6],[95,11,56,7,"gameType"],[95,19,56,15],[95,21,56,17],[95,28,56,24],[95,32,56,28],[96,6,58,2],[96,10,58,6,"gameIdCache"],[96,21,58,17],[96,22,58,18,"gameType"],[96,30,58,26],[96,31,58,27],[96,33,58,29],[97,8,59,4],[97,15,59,11,"gameIdCache"],[97,26,59,22],[97,27,59,23,"gameType"],[97,35,59,31],[97,36,59,32],[98,6,60,2],[99,6,62,2],[99,10,62,6],[100,8,63,4],[100,12,63,10,"candidates"],[100,22,63,20],[100,25,63,23,"candidateTypes"],[100,39,63,37],[100,40,63,38,"gameType"],[100,48,63,46],[100,49,63,47],[101,8,65,4],[101,13,65,9],[101,17,65,15,"type"],[101,21,65,19],[101,25,65,23,"candidates"],[101,35,65,33],[101,37,65,35],[102,10,66,6],[102,14,66,6,"_yield$supabase$from$"],[102,35,66,6],[102,44,66,36,"supabase"],[102,53,66,44],[102,54,66,44,"supabase"],[102,62,66,44],[102,63,67,9,"from"],[102,67,67,13],[102,68,67,14],[102,75,67,21],[102,76,67,22],[102,77,68,9,"select"],[102,83,68,15],[102,84,68,16],[102,99,68,31],[102,100,68,32],[102,101,69,9,"eq"],[102,103,69,11],[102,104,69,12],[102,115,69,23],[102,117,69,25,"type"],[102,121,69,29],[102,122,69,30],[102,123,70,9,"maybeSingle"],[102,134,70,20],[102,135,70,21],[102,136,70,22],[103,12,66,14,"data"],[103,16,66,18],[103,19,66,18,"_yield$supabase$from$"],[103,40,66,18],[103,41,66,14,"data"],[103,45,66,18],[104,12,66,20,"error"],[104,17,66,25],[104,20,66,25,"_yield$supabase$from$"],[104,41,66,25],[104,42,66,20,"error"],[104,47,66,25],[105,10,72,6],[105,14,72,10,"error"],[105,19,72,15],[105,21,72,17],[106,12,73,8,"console"],[106,19,73,15],[106,20,73,16,"error"],[106,25,73,21],[106,26,73,22],[106,64,73,60,"type"],[106,68,73,64],[106,72,73,68],[106,74,73,70,"error"],[106,79,73,75],[106,80,73,76],[107,12,74,8],[108,10,75,6],[109,10,77,6],[109,14,77,10,"data"],[109,18,77,14],[109,20,77,16,"id"],[109,22,77,18],[109,24,77,20],[110,12,78,8,"gameIdCache"],[110,23,78,19],[110,24,78,20,"gameType"],[110,32,78,28],[110,33,78,29],[110,36,78,32,"data"],[110,40,78,36],[110,41,78,37,"id"],[110,43,78,39],[111,12,79,8,"console"],[111,19,79,15],[111,20,79,16,"log"],[111,23,79,19],[111,24,79,20],[111,46,79,42,"gameType"],[111,54,79,50],[111,59,79,55,"type"],[111,63,79,59],[111,70,79,66,"data"],[111,74,79,70],[111,75,79,71,"id"],[111,77,79,73],[111,79,79,75],[111,80,79,76],[112,12,80,8],[112,19,80,15,"data"],[112,23,80,19],[112,24,80,20,"id"],[112,26,80,22],[113,10,81,6],[114,8,82,4],[115,8,84,4,"console"],[115,15,84,11],[115,16,84,12,"warn"],[115,20,84,16],[115,21,84,17],[115,51,84,47,"gameType"],[115,59,84,55],[115,72,84,68,"candidates"],[115,82,84,78],[115,83,84,79,"join"],[115,87,84,83],[115,88,84,84],[115,92,84,88],[115,93,84,89],[115,96,84,92],[115,97,84,93],[116,8,85,4],[116,15,85,11],[116,19,85,15],[117,6,86,2],[117,7,86,3],[117,8,86,4],[117,15,86,11,"err"],[117,18,86,14],[117,20,86,16],[118,8,87,4,"console"],[118,15,87,11],[118,16,87,12,"error"],[118,21,87,17],[118,22,87,18],[118,53,87,49,"gameType"],[118,61,87,57],[118,64,87,60],[118,66,87,62,"err"],[118,69,87,65],[118,70,87,66],[119,8,88,4],[119,15,88,11],[119,19,88,15],[120,6,89,2],[121,4,90,0],[121,5,90,1],[122,4,90,1],[122,20,55,13,"getGameId"],[122,29,55,22,"getGameId"],[122,30,55,22,"_x"],[122,32,55,22],[123,6,55,22],[123,13,55,22,"_ref"],[123,17,55,22],[123,18,55,22,"apply"],[123,23,55,22],[123,30,55,22,"arguments"],[123,39,55,22],[124,4,55,22],[125,2,55,22],[125,5,90,1],[127,2,92,0],[128,0,93,0],[129,0,94,0],[130,0,95,0],[131,2,96,7],[131,6,96,13,"GAME_TYPES"],[131,16,96,23],[131,19,96,26],[132,4,97,2,"TWENTY48"],[132,12,97,10],[132,14,97,12],[132,20,97,18],[133,4,98,2,"TETRIS"],[133,10,98,8],[133,12,98,10],[133,20,98,18],[134,4,99,2,"SNAKE"],[134,9,99,7],[134,11,99,9],[134,18,99,16],[135,4,100,2,"CHESS"],[135,9,100,7],[135,11,100,9],[135,18,100,16],[136,4,101,2,"MINESWEEPER"],[136,15,101,13],[136,17,101,15],[136,30,101,28],[137,4,102,2,"SUDOKU"],[137,10,102,8],[137,12,102,10],[137,20,102,18],[138,4,103,2,"MEMORY_MATCH"],[138,16,103,14],[138,18,103,16],[138,32,103,30],[139,4,104,2,"WORD_SEARCH"],[139,15,104,13],[139,17,104,15],[139,30,104,28],[140,4,105,2,"SLIDING_PUZZLE"],[140,18,105,16],[140,20,105,18],[140,36,105,34],[141,4,106,2,"BLOCK_BLAST"],[141,15,106,13],[141,17,106,15],[141,30,106,28],[142,4,107,2,"WATER_SORT"],[142,14,107,12],[142,16,107,14],[142,28,107,26],[143,4,108,2,"FLOW_CONNECT"],[143,16,108,14],[143,18,108,16],[143,32,108,30],[144,4,109,2,"MANCALA"],[144,11,109,9],[144,13,109,11],[144,22,109,20],[145,4,110,2,"SOLITAIRE"],[145,13,110,11],[145,15,110,13],[145,26,110,24],[146,4,111,2,"CONNECT_4"],[146,13,111,11],[146,15,111,13],[146,26,111,24],[147,4,112,2,"SIMON_SAYS"],[147,14,112,12],[147,16,112,14],[147,28,112,26],[148,4,113,2,"WHACK_A_TAP"],[148,15,113,13],[148,17,113,15],[148,30,113,28],[149,4,114,2,"DOTS_AND_BOXES"],[149,18,114,16],[149,20,114,18],[149,36,114,34],[150,4,115,2,"KAKURO"],[150,10,115,8],[150,12,115,10],[150,20,115,18],[151,4,116,2,"WORD_WHEEL"],[151,14,116,12],[151,16,116,14],[151,28,116,26],[152,4,117,2,"CROSS_WORD_WHEEL"],[152,20,117,18],[152,22,117,20],[152,40,117,38],[153,4,118,2,"SCRABBLE"],[153,12,118,10],[153,14,118,12],[153,24,118,22],[154,4,119,2,"CROSSWORD"],[154,13,119,11],[154,15,119,13],[155,2,120,0],[155,3,120,1],[157,2,122,0],[158,0,123,0],[159,0,124,0],[160,2,125,7],[160,6,125,13,"clearGameIdCache"],[160,22,125,29],[160,25,125,32,"clearGameIdCache"],[160,26,125,32],[160,31,125,38],[161,4,126,2,"Object"],[161,10,126,8],[161,11,126,9,"keys"],[161,15,126,13],[161,16,126,14,"gameIdCache"],[161,27,126,25],[161,28,126,26],[161,29,126,27,"forEach"],[161,36,126,34],[161,37,126,36,"k"],[161,38,126,37],[161,42,126,42],[161,49,126,49,"gameIdCache"],[161,60,126,60],[161,61,126,61,"k"],[161,62,126,62],[161,63,126,63],[161,64,126,64],[162,4,127,2,"console"],[162,11,127,9],[162,12,127,10,"log"],[162,15,127,13],[162,16,127,14],[162,42,127,40],[162,43,127,41],[163,2,128,0],[163,3,128,1],[164,2,130,0],[164,6,130,0,"_default"],[164,14,130,0],[164,17,130,15],[165,4,131,2,"getGameId"],[165,13,131,11],[166,4,132,2,"GAME_TYPES"],[166,14,132,12],[167,4,133,2,"clearGameIdCache"],[168,2,134,0],[168,3,134,1],[169,0,134,2],[169,3]],"functionMap":{"names":["<global>","candidateTypes","getGameId","clearGameIdCache","Object.keys.forEach$argument_0"],"mappings":"AAA;ACuC;CDQ;yBEO;CFmC;gCGmC;mCCC,4BD;CHE"},"hasCjsExports":false},"type":"js/module"}]}